version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      # dockerfile: Dockerfile # 假设 Dockerfile 名称为 Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      # 可以添加其他前端需要的环境变量，例如 API 地址
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules # 避免覆盖容器内的 node_modules
      - /app/.next # 避免覆盖容器内的 .next 目录
    # command: npm run dev # 通常在 Dockerfile 中定义，但可以在这里覆盖
    depends_on:
      - backend
    networks:
      - vibetrade_network

  backend:
    build:
      context: ./backend
      # dockerfile: Dockerfile # 假设 Dockerfile 名称为 Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://vibetrade_user:vibetrade_password@db:5432/vibetrade_db
      # 可以添加其他后端需要的环境变量
    volumes:
      - ./backend:/app
    # command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # 示例命令，具体取决于您的 FastAPI 应用入口和 Dockerfile
    depends_on:
      - db
    networks:
      - vibetrade_network

  db:
    image: postgres:15 # 或者 postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=vibetrade_user
      - POSTGRES_PASSWORD=vibetrade_password
      - POSTGRES_DB=vibetrade_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vibetrade_network
    # healthcheck: # 可选，用于检查数据库是否准备就绪
    #   test: ["CMD-SHELL", "pg_isready -U vibetrade_user -d vibetrade_db"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  postgres_data: # 定义命名卷以持久化 PostgreSQL 数据

networks:
  vibetrade_network:
    driver: bridge