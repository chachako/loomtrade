tool_usage_guidance:
  mandatory_tool_usage_error_handling:
    trigger: "When the error '[ERROR] You did not use a tool in your previous response! Please retry with a tool use.' is received, or when a tool use is perceived as missing or failed."
    priority: 999 # This rule has a very high priority
    action: |
      <thinking>
      **[Critical Instruction]** I've been triggered because a tool use was expected but was either missing, failed, or incorrectly formatted. Correct tool usage is crucial for task completion, and I must prioritize resolving this.

      I need to reflect on whether I attempted a tool use previously:
      *   **If I did not attempt a tool use:** I must re-examine the user's request and my System Prompt (especially the "TOOL USE" and "Tools" sections), identify the required tool, and immediately construct a correct tool use.
      *   **If I believe I did attempt a tool use, but it was not recognized or failed:** It's highly likely my tool use was formatted incorrectly. I must check for the following common error patterns:
          1.  **Incorrect main tool tag (XML-style structure):** Misunderstanding the `<tool_name>` placeholder (e.g., writing `<tool_name>actual_tool_name</tool_name>` instead of `<ACTUAL_TOOL_NAME>...</ACTUAL_TOOL_NAME>`).
          2.  **Unclosed XML-style tags (XML-style structure):** Forgetting to close tool or parameter tags.
          3.  **Incorrect parameter tags (XML-style structure):** Misspelling parameter names or forgetting their closing tags.
          4.  **Parameter Value Formatting (Content of parameters):** The content *inside* a parameter tag (e.g., the value for `<diff>VALUE</diff>`) must be provided *exactly* as specified by that tool's documentation in the System Prompt. This is paramount for parameters expecting specific multi-line blocks or raw strings containing special characters.
              **My rule of thumb: I should NEVER automatically XML-escape or wrap parameter values in `<![CDATA[...]]>` myself.** I must use the raw string literal if the tool's documentation in the System Prompt shows it or implies it through its examples.
              For instance, with the `apply_diff` tool, its `diff` parameter expects a raw, multi-line block:

              **Incorrect LLM Behavior (e.g., adding CDATA to `apply_diff`'s `diff` parameter):**
              ```xml
              <apply_diff>
                <path>file.py</path>
                <diff>
                <![CDATA[<<<<<<< SEARCH
                :start_line:1
                [exact content to find including whitespace]
                =======
                [new content to replace with]
                >>>>>>> REPLACE]]>
                </diff>
              </apply_diff>
              ```

              **Correct Behavior (providing the raw block exactly as per `apply_diff` tool specification):**
              ```xml
              <apply_diff>
                <path>file.py</path>
                <diff>
                <<<<<<< SEARCH
                :start_line:1
                [exact content to find including whitespace]
                =======
                [new content to replace with]
                >>>>>>> REPLACE
                </diff>
              </apply_diff>
              ```

      I will strictly adhere to the "Tool Use Formatting" for the overall XML-style structure (tool name and parameter name tags). For the *content* (value) of each parameter, I will ensure it precisely matches the format shown or implied in that specific tool's documentation in the System Prompt's "Tools" section, without adding my own escaping or CDATA wrappers.

      Therefore, my next steps are:
      1.  **Review Context and System Prompt Instructions Carefully:**
          *   Cross-reference my System Prompt: understand the overall XML structure for "Tool Use Formatting" and, critically, the specific formatting requirements (raw string, multi-line block, etc.) for each parameter's *value* for the intended tool.
          *   Analyze the latest user message and conversation history to clarify the required operation and the most appropriate tool.
      2.  **Construct and Execute Tool Use:**
          *   I will be vigilant about common errors, especially the rule for parameter value formatting: provide values *exactly* as shown/implied in their respective tool documentation (System Prompt, "Tools" section), without adding XML escaping or CDATA wrappers myself.
          *   I will use the correct overall XML structure for the tool call and provide parameter values precisely as documented.
          *   My response must contain a correctly formatted tool use.

          **Correct Tool Use XML Format Reference (Overall Structure - from System Prompt):**
          ---
          <ACTUAL_TOOL_NAME>
            <PARAM1_NAME>value1</PARAM1_NAME>
            <PARAM2_NAME>value2</PARAM2_NAME>
            ...
          </ACTUAL_TOOL_NAME>
          ---
          (Example: For `<read_file>`, `value1` for `path` is a simple string. For `<apply_diff>`, the value for its `diff` parameter would be its specific multi-line block format, provided raw.)

      This corrective action is my highest priority.
      </thinking>