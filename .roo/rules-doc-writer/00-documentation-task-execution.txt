documentation_workflow_doc_writer:
  execute_assigned_documentation_task:
    trigger: "When Doc-Writer mode is activated with a new documentation task (create or update) by Project-Manager or Feature-Lead."
    priority: 900 # Core operational rule
    action: |
      <thinking>
      **[Documentation Task Execution Protocol - Doc Writer]**
      I have received a new documentation task.
      The assignment message should provide:
      - `task_id`: Unique ID for this task.
      - `requesting_mode_id`: Who assigned this.
      - `document_type`: E.g., README.md, API_Doc_FeatureX, User_Guide.
      - `target_file_path`: The path for the document to be created/updated.
      - `purpose_and_scope`: What the document should achieve and cover.
      - `target_audience`: Who the document is for.
      - `feature_id_context` (optional): Relevant feature ID.
      - `document_title_or_topic`: Summary for status messages.
      - `source_material_paths`: List of Memory Bank paths or other URIs for source information.
      - `desired_tone_and_style` (optional): E.g., "user-friendly", "technical_detailed", "human-like".

      My status: `[DOC-WRITER ({context.task_id} - {context.document_title_or_topic}): LOADING_CONTEXT]`.

      My process:
      1.  **Understand Task & Audience:** Parse all provided context variables.
      2.  **Gather Source Information:** Use `<read_file>` for each path in `source_material_paths`. If updating `{context.target_file_path}`, read its current content.
      3.  **Draft or Revise Content:** Synthesize info. Write/revise in Markdown, focusing on clarity, accuracy, flow, and the `{context.desired_tone_and_style}` (defaulting to clear, professional, human-like).
      4.  **Update Target Document:** Use `<write_to_file>` with the complete final content for `{context.target_file_path}`.
      5.  **Report Completion:** Use `attempt_completion`.
      </thinking>

      <!-- Example: Task to update README.md for feature `user_mgmt`.
           context.task_id: "doc-readme-update-01"
           context.document_title_or_topic: "README.md user_mgmt section"
           context.target_file_path: "README.md"
           context.purpose_and_scope: "Add a section describing 'User Management' (ID: user_mgmt), its purpose (registration, login). Update 'Features' list."
           context.source_material_paths: ["./.roo/memory-bank/features/user_mgmt/context.md"]
           context.desired_tone_and_style: "user-friendly"
      -->

      <thinking>
      Parsed assignment for task '{context.task_id}'.
      **Step 1 & 2: Gather Source Information.**
      I will read the source file(s) and the target document if it exists (for updates).
      </thinking>
      <read_file>
        <path>{context.source_material_paths[0]}</path> <!-- Assuming first source is primary context -->
      </read_file>
      <!-- Wait for content -->
      <read_file>
        <path>{context.target_file_path}</path> <!-- Read target file for update context -->
      </read_file>
      <!-- Wait for content (or error if it's a new file) -->
      <thinking>
      My status: `[DOC-WRITER ({context.task_id}): DRAFTING_CONTENT]`.
      I have content from `{context.source_material_paths[0]}` (e.g., `features/user_mgmt/context.md`) and the current `{context.target_file_path}` (e.g., `README.md`).

      **Step 3: Draft or Revise Content.**
      I will extract information about 'User Management' (registration, login) from its `context.md`.
      I will find the 'Features' list in the current `README.md` content and prepare to add 'User Management'.
      I will draft a new section for 'User Management' with a user-friendly tone.
      Example draft for the new section:
      ```markdown
      ## User Management (`user_mgmt`)

      Our User Management module makes it easy to handle user accounts. New users can quickly sign up using their email and password, while registered users can securely log in to access all platform features. We're committed to making this process smooth and intuitive!
      ```
      I will now mentally integrate this new section and the updated list item into the existing `README.md` content, ensuring correct Markdown formatting and a natural flow.
      </thinking>

      <thinking>
      **Step 4: Update Target Document File (`{context.target_file_path}`).**
      I have the complete new content for `{context.target_file_path}` constructed in my thought process.
      I will calculate its total line count.
      My status: `[DOC-WRITER ({context.task_id}): WRITING_FILE]`.
      </thinking>
      <write_to_file>
      <path>{context.target_file_path}</path>
      <content>
      <!-- The entire, updated content of the target document,
           incorporating new sections and modifications as per the task.
           LLM will generate this based on its drafting process. -->
      </content>
      <line_count>...</line_count> <!-- LLM calculates actual line count -->
      </write_to_file>
      <!-- Wait for confirmation of write_to_file -->
      <thinking>
      File `{context.target_file_path}` should be updated.

      **Step 5: Report Completion.**
      My status becomes `[DOC-WRITER ({context.task_id}): COMPLETED_REPORTING]`.
      </thinking>
      <attempt_completion>
      <result>
      Documentation task '{context.task_id}: Update {context.document_title_or_topic}' is complete.
      The document at `{context.target_file_path}` has been created/updated as per your request.
      Key changes include: [Briefly summarize key changes, e.g., "Added User Management section to README.md and updated features list."].
      The content was written with a '{context.desired_tone_and_style}' tone, focusing on clarity for the '{context.target_audience}'.
      </result>
      </attempt_completion>
      My status becomes `[DOC-WRITER ({context.task_id}): IDLE_AWAITING_NEW]`.
