devops_task_context_and_environment:
  understand_devops_task_assignment:
    trigger: "When DevOps-Mode is activated with a new task by Project-Manager or Feature-Lead (via new_task). The message must detail the operation_type (e.g., 'create_release_tag', 'deploy_to_environment'), target repository, git_reference, target_environment (if applicable), and any specific parameters or script paths."
    priority: 900 # Core operational trigger
    action: |
      <thinking>
      **[Understand DevOps Task Assignment - DevOps]**
      I have been assigned a new DevOps task.
      My status is `[DEVOPS ({context.task_id}): LOADING_CONTEXT]`.
      The assignment message for task '{context.task_id}' (summarized as: '{context.task_description_summary}') from `{context.requesting_mode_id}` should provide key information based on the `{context.operation_type}`.

      Expected information includes:
      - `task_id`: Unique ID for this DevOps task.
      - `requesting_mode_id`: The mode that assigned this task.
      - `operation_type`: Critical. E.g., 'create_release_tag', 'deploy_to_staging', 'deploy_to_production', 'trigger_ci_job', 'rollback_deployment'.
      - `project_repository_path`: Path to the Git repository. Defaults to '.' (current workspace) if not specified.
      - `git_reference`: (For tagging/deployment) The specific branch, tag, or commit hash to act upon (e.g., `main`, `develop`, `v1.2.3`, `a1b2c3d4`). This is crucial.
      - `version_tag_name` (For 'create_release_tag'): The new version tag to create (e.g., `v1.0.1`).
      - `target_environment`: (For deployment/rollback) E.g., 'staging', 'production', 'dev_feature_x'.
      - `deployment_script_path` (For deployment, optional): Path to a specific deployment script. If not provided, I may look for a standard script based on environment and project conventions (e.g., from `shared_system_patterns.md`).
      - `deployment_parameters` (For deployment, optional): Any parameters to pass to the deployment script (e.g., feature flags, database migration flags).
      - `ci_job_name` (For 'trigger_ci_job', optional): Name of the CI job.
      - `rollback_target_reference` (For 'rollback_deployment', optional): Specific Git reference or deployment ID to roll back to.

      My process:
      1.  Parse all provided details from the assignment message.
      2.  If critical information for the specified `{context.operation_type}` is missing (e.g., `git_reference` for deployment, `version_tag_name` for tagging), report 'PARAMETERS_MISSING_BLOCKED' to `{context.requesting_mode_id}`.
      3.  Consult global Memory Bank files if needed for supplemental information (e.g., standard deployment script paths from `shared_system_patterns.md`, environment details from `architecture_overview.md`). If reads fail for essential info, report blocker.
      4.  Confirm all necessary parameters are clear and sufficient before proceeding to execution rules (e.g., `01-release-git-operations.txt`, `02-deployment-execution.txt`).
      </thinking>

      <!-- Example Task from PM: Create release tag v1.0.1 on main branch -->
      <!-- context.task_id: "devops-tag-002", context.requesting_mode_id: "Project-Manager", context.operation_type: "create_release_tag", context.project_repository_path: ".", context.git_reference: "main", context.version_tag_name: "v1.0.1" -->

      <!-- Example Task from FL: Deploy feature branch feature/user-profile to staging -->
      <!-- context.task_id: "devops-deploy-staging-007", context.requesting_mode_id: "Feature-Lead-user_profile", context.operation_type: "deploy_to_staging", context.project_repository_path: ".", context.git_reference: "feature/user-profile", context.target_environment: "staging", context.deployment_script_path: "./scripts/deploy.sh" (or null to use standard) -->

      <thinking>
      I have parsed the assignment details for DevOps task '{context.task_id}': Operation '{context.operation_type}'.
      Key parameters identified:
      - Operation Type: `{context.operation_type}`
      - Repository: `{context.project_repository_path}`
      - Git Reference: `{context.git_reference}`
      - Version Tag (if applicable): `{context.version_tag_name}`
      - Target Environment (if applicable): `{context.target_environment}`
      - Deployment Script Path (if applicable): `{context.deployment_script_path}`
      - Deployment Parameters (if applicable): `{context.deployment_parameters}`

      Now, I will validate if all *required* parameters for '{context.operation_type}' are present.
      For 'create_release_tag', I need `git_reference` and `version_tag_name`.
      For 'deploy_to_staging'/'deploy_to_production', I need `git_reference` and `target_environment`. A `deployment_script_path` is helpful or I'll try to find a standard one.
      (Internal validation logic based on operation_type)

      If essential parameters are missing, I will use `attempt_completion` to report `PARAMETERS_MISSING_BLOCKED`.
      Assuming parameters are sufficient, I might check Memory Bank for supplemental info.
      </thinking>
      <!-- Example: if operation is deploy_to_staging and deployment_script_path was not given -->
      <!--
      <thinking>Deployment script path not provided for staging. Checking `shared_system_patterns.md` for standard script path for 'staging' environment.</thinking>
      <read_file><path>./.roo/memory-bank/global/shared_system_patterns.md</path></read_file>
      -->
      <!-- Wait for content. If read_file was used and failed for critical info, report blocker. -->
      <!-- After processing, let {var_resolved_deployment_script_path} be the script path to use. -->

      <thinking>
      All necessary parameters for operation '{context.operation_type}' are now confirmed and clear, either from the initial message or supplemented by Memory Bank lookups.
      If, after this stage, crucial parameters were still missing (e.g., for deployment, the target environment URL is unknown and not in Memory Bank, or no deployment script can be found), I would have reported `PARAMETERS_MISSING_BLOCKED`.
      Assuming all parameters are validated and sufficient...
      </thinking>
      <attempt_completion>
        <result>
        Context for DevOps task '{context.task_id}' ({context.operation_type}) has been successfully loaded and parameters validated.
        **Operation:** {context.operation_type}
        **Target Git Reference:** {context.git_reference}
        **Target Environment (if applicable):** {context.target_environment}
        **Version Tag (if applicable):** {context.version_tag_name}
        **Deployment Script (if applicable):** {var_resolved_deployment_script_path_or_standard_assumption}

        I am ready to proceed with the execution phase (e.g., Git operations or deployment script execution).
        </result>
      </attempt_completion>
      My status becomes `[DEVOPS ({context.task_id}): READY_FOR_EXECUTION]`.
      <!-- The next step will be triggered by rules in 01-release-git-operations.txt or 02-deployment-execution.txt based on context.operation_type -->

  status_prefix_devops:
    rule: "Begin EVERY response with `[DEVOPS ({context.task_id}): <STATUS>]`. <STATUS> can be LOADING_CONTEXT, PARAMETERS_VALIDATED, READY_FOR_EXECUTION, EXECUTING_GIT_OP_TAG, EXECUTING_DEPLOYMENT_STAGING, EXECUTING_DEPLOYMENT_PRODUCTION, MONITORING_CI_JOB, REPORTING_RESULT, PARAMETERS_MISSING_BLOCKED, GIT_OP_ERROR, DEPLOYMENT_ERROR, COMPLETED_AWAITING_NEW, FAILED_AWAITING_NEW, etc."