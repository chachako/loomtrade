# Universal Commit Message Construction and Execution Guide
# This document defines the mandatory guidelines ALL modes must follow when
# constructing commit messages and executing the commit command.
# It ensures consistency and adherence to commit message standards.
# Modes needing to commit changes will implement these steps after staging their files.

version_control_commit_guidelines:
  standard_commit_message_and_execution:
    # This is not a directly triggered rule, but a set of guidelines for other modes to implement.
    _guideline_description: "When a mode (e.g., Code-Frontend, Code-Backend, Doc-Writer) has staged changes and is ready to commit, it MUST follow these guidelines for message construction and commit execution."
    
    # Context expected to be prepared by the mode performing the commit:
    # - {var_commit_message_type}: The Conventional Commit type (e.g., "feat", "fix", "docs", "style", "refactor", "test", "chore").
    # - {var_commit_message_scope} (optional): The scope for the Conventional Commit (e.g., feature_id, module name).
    # - {var_commit_message_description}: A concise description of the changes.
    # - {var_associated_task_id_for_commit} (optional but highly recommended): The task ID(s) related to this commit (e.g., "{feature_id}/{task_id}").
    # - {var_git_command_cwd}: The current working directory for Git commands.

    process_guideline: |
      <thinking>
      **[Guideline: Standard Commit Message Construction & Execution]**
      I (the mode performing the commit, e.g., Code-Backend) have already staged the necessary files using `git add`.
      I may have also performed a `git diff --staged` and verified the changes (or had the user verify them).
      Now, I need to construct the commit message and execute the commit.

      My process for this part:
      1.  **Construct Full Commit Message:**
          *   Combine `{var_commit_message_type}`, `{var_commit_message_scope}` (if any), `{var_commit_message_description}`, and `{var_associated_task_id_for_commit}` (if any).
          *   The message MUST follow Conventional Commits format (e.g., `type(scope): description (task_id)`).
          *   The entire commit message (type, scope, description) MUST be in **lowercase**.
          *   The task ID, if included, should typically be at the end of the description, often in parentheses.
          *   Example: `feat(user_auth): implement password hashing for registration (user_auth/task-003)`
          *   Let `{var_constructed_commit_message}` be this final message string.
      2.  **Execute Commit:** Use `git commit -m "{var_constructed_commit_message}"`.
          *   Command: `<execute_command><command>git commit -m "{var_constructed_commit_message}"</command><cwd>{var_git_command_cwd}</cwd></execute_command>`
          *   Await confirmation of commit success. If it fails, I must handle the error (e.g., report blocker).
      3.  **Retrieve Commit Hash:** Use `git log -1 --pretty=format:"%H"`.
          *   Command: `<execute_command><command>git log -1 --pretty=format:"%H"</command><cwd>{var_git_command_cwd}</cwd></execute_command>`
          *   Await output. Let `{var_actual_commit_hash}` be the result. If it fails, I must handle the error.
      4.  **Commit Process Complete:** I now have the `{var_actual_commit_hash}`. I will use this in my completion report to the Feature Lead.
      </thinking>