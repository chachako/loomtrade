feature_planning_and_execution:
  delegate_coding_tasks_to_code_modes:
    trigger: "When tasks in `./.roo/memory-bank/features/{feature_id}/progress.yaml` are in 'backlog' or 'defined' status, have their `assignee_mode` set to 'code-frontend' or 'code-backend', and are ready for development (e.g., dependencies met, prioritized by Feature Lead)."
    priority: 850 # Critical for progressing development
    action: |
      <thinking>
      **[Coding Task Delegation Protocol for Feature: {feature_id}]**
      My status should be `[FEATURE_LEAD ({feature_id}): DELEGATING_CODING_TASK]`.
      I need to delegate one or more coding tasks from `features/{feature_id}/progress.yaml` to the appropriate specialized coding modes (`code-frontend` or `code-backend`).

      My process for each task to be delegated:
      1.  **Identify Task:** Read `features/{feature_id}/progress.yaml` and identify a task suitable for delegation (e.g., status "backlog", `assignee_mode` is `code-frontend` or `code-backend`).
      2.  **Gather Context for the Task:** Extract task ID, name, description, and links to relevant sections in `features/{feature_id}/context.md` or `features/{feature_id}/design_notes.md`. Note the feature branch (e.g., from `progress.yaml`'s `target_branch` field).
      3.  **Determine Target Code Mode Slug:** This will be `code-frontend` or `code-backend` based on the task's `assignee_mode`.
      4.  **Construct `new_task` Message:** Create a detailed message for the coding mode, including all context, expected deliverables (e.g., implemented code, unit tests), and Memory Bank references.
      5.  **Execute `new_task` Tool Call.**
      6.  **Update `progress.yaml`:** Change the task's status to "in-progress" (or "delegated") and potentially note the delegation.
      7.  **Log Delegation in `active_log.md`.**
      8.  **Update `manifest.yaml` (Global) via Project Manager if this constitutes a major phase shift, or simply rely on PM to poll progress.** For now, focus on feature-local updates.

      I will start by reading `features/{feature_id}/progress.yaml` to find a task to delegate.
      Let's assume `feature_id` is "user_mgmt". Path is `fp = "./.roo/memory-bank/features/user_mgmt/"`.
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/features/{feature_id}/progress.yaml</path> <!-- Replace {feature_id} -->
      </read_file>
      <thinking>
      **[Coding Task Delegation Protocol - Cont. {feature_id}]**
      I have received the content of `features/{feature_id}/progress.yaml`.
      I will parse the YAML in my thought process to find a suitable task.

      Suppose I find the following task in `progress.yaml` for `feature_id="user_mgmt"`:
      ```yaml
      # ...
      tasks:
        - id: "user_mgmt-task-002"
          name: "Implement POST /api/auth/register endpoint"
          status: "backlog"
          assignee_mode: "code-backend"
          description: "Handles user registration. Validates input, hashes password, stores user. Ref: context.md#us-user_mgmt-001"
          estimated_effort: "6h"
          dependencies: ["user_mgmt-task-001"] # Assume task-001 (DB design) is complete or not a hard blocker for API shell
      # ...
      ```
      And the `target_branch` in `progress.yaml` is `feature/user_mgmt`.

      **Task to Delegate:** `user_mgmt-task-002`
      **Target Code Mode Slug:** `code-backend`

      **Step 1: Construct `new_task` Message for `code-backend` mode.**
      The message needs to be specific and provide all necessary context for the `code-backend` mode.
      </thinking>
      <!-- The actual new_task tool call will be generated in the next turn. -->
      <thinking>
      **[Coding Task Delegation Protocol - Cont. {feature_id}]**
      I am ready to construct the `new_task` for `user_mgmt-task-002` to be sent to `code-backend`.
      </thinking>
      <new_task>
      <mode>code-backend</mode> <!-- Fixed slug for the backend coding mode -->
      <message>
      "**New Backend Coding Task for Feature 'User Management' (ID: user_mgmt)**

      **Task ID:** `user_mgmt-task-002`
      **Task Name:** Implement POST /api/auth/register endpoint

      **Description:**
      You are to implement the backend API endpoint for user registration. This involves:
      1.  Receiving user registration data (e.g., email, password).
      2.  Validating the input data (e.g., email format, password complexity as per `features/user_mgmt/context.md#us-user_mgmt-001` Acceptance Criteria).
      3.  Checking if the email already exists in the database.
      4.  Securely hashing the password before storage.
      5.  Storing the new user record in the database (schema details should be in `features/user_mgmt/design_notes.md` or implied by `user_mgmt-task-001`).
      6.  Returning an appropriate success or error response.

      **Key Requirements & Acceptance Criteria Reference:**
      *   Please refer to `./.roo/memory-bank/features/user_mgmt/context.md`, specifically User Story `US-user_mgmt-001` and its Acceptance Criteria.

      **API Design & Data Model Reference:**
      *   Consult `./.roo/memory-bank/features/user_mgmt/design_notes.md` for any specific API endpoint design or data model decisions related to user registration. If details are missing for DB schema, assume standard practice or flag for clarification.

      **Version Control:**
      *   All work must be done on the feature branch: `feature/user_mgmt`.
      *   Commit your changes following the Conventional Commits specification (all lowercase). Ensure messages are clear, descriptive, and reference this task ID. Example: 'feat(auth): implement registration endpoint (user_mgmt-task-002)'

      **Testing:**
      *   Implement relevant unit tests for the registration logic and API endpoint.
      *   Consider integration tests for database interactions if applicable.

      **Memory Bank & Reporting:**
      *   You are NOT expected to directly update the feature-level Memory Bank files (`context.md`, `progress.yaml` etc. in `features/user_mgmt/`).
      *   Upon completion of this task (including coding and unit tests), use the `attempt_completion` tool. Your result summary should clearly state what was implemented, a list of commit hashes, and the status of unit tests (e.g., "Implemented POST /api/auth/register. Unit tests passing. Commits: [hash1, hash2]").

      Please acknowledge this task and ask any clarifying questions before starting.
      "
      </message>
      </new_task>
      <thinking>
      **[Coding Task Delegation Protocol - Cont. {feature_id}]**
      After the `new_task` tool call is successfully sent.

      **Step 2: Update `features/{feature_id}/progress.yaml` for the delegated task.**
      I will read `features/{feature_id}/progress.yaml`.
      In my thought process, I will parse the YAML, find the entry for `id: "user_mgmt-task-002"`, and update its `status` to "in-progress". I might also add a note about who it was assigned to if the `assignee_mode` field isn't specific enough (though here it is).
      Then, serialize and `write_to_file`.
      </thinking>
      <!-- Example update for progress.yaml - tool call in a subsequent turn -->
      <!--
      <thinking>
      Reading `features/user_mgmt/progress.yaml` to update status for "user_mgmt-task-002".
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/features/user_mgmt/progress.yaml</path>
      </read_file>
      <thinking>
      Received content of `features/user_mgmt/progress.yaml`.
      I will find `user_mgmt-task-002` and change `status: "backlog"` to `status: "in-progress"`.
      I will also update `last_updated_timestamp` for the main feature entry.
      Construct the full new YAML string.
      </thinking>
      <write_to_file>
      <path>./.roo/memory-bank/features/user_mgmt/progress.yaml</path>
      <content>
      # Feature Progress: user_mgmt
      # ...
      last_updated_timestamp: "YYYY-MM-DD HH:MM:SS" # Updated
      tasks:
        - id: "user_mgmt-task-001"
          # ... (previous task)
        - id: "user_mgmt-task-002"
          name: "Implement POST /api/auth/register endpoint"
          status: "in-progress" # Updated
          assignee_mode: "code-backend"
          description: "Handles user registration. Validates input, hashes password, stores user. Ref: context.md#us-user_mgmt-001"
          estimated_effort: "6h"
          actual_effort: ""
          dependencies: ["user_mgmt-task-001"]
          related_commits: []
        # ... other tasks ...
      </content>
      <line_count>XX</line_count> <!-- Actual line count needed -->
      </write_to_file>
      -->
      <thinking>
      **[Coding Task Delegation Protocol - Cont. {feature_id}]**
      After `progress.yaml` is updated.

      **Step 3: Log Delegation in `features/{feature_id}/active_log.md`.**
      I will append an entry to `active_log.md` noting the delegation.
      Entry: `[YYYY-MM-DD HH:MM:SS] - Delegated task "user_mgmt-task-002: Implement POST /api/auth/register endpoint" to code-backend mode.`
      </thinking>
      <!--
      <insert_content>
      <path>./.roo/memory-bank/features/user_mgmt/active_log.md</path>
      <line>0</line> <!-- Append to end -->
      <content>
      [YYYY-MM-DD HH:MM:SS] - Delegated task "user_mgmt-task-002: Implement POST /api/auth/register endpoint" to code-backend mode.
      </content>
      </insert_content>
      -->
      <thinking>
      **[Coding Task Delegation Protocol - Cont. {feature_id}]**
      Delegation of this task is now complete.
      I would then look for other tasks to delegate from `progress.yaml` or wait for coding modes to report completion.
      My status returns to `[FEATURE_LEAD ({feature_id}): ACTIVE]`.
      If there are no more tasks to delegate immediately, I might inform the Project Manager about the start of development for certain tasks.
      </thinking>
      <attempt_completion>
      <result>
      Task "user_mgmt-task-002: Implement POST /api/auth/register endpoint" for feature `{feature_id}` has been delegated to the `code-backend` mode.
      The status of this task in `features/{feature_id}/progress.yaml` has been updated to "in-progress".
      The delegation has been logged in `features/{feature_id}/active_log.md`.
      I will monitor for its completion.
      </result>
      </attempt_completion>