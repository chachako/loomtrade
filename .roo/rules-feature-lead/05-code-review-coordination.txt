code_review_coordination_feature_lead:
  initiate_code_review_process:
    trigger: "When a coding sub-task (e.g., `{context.completed_coder_task_id}`) for feature {context.feature_id} is reported as complete by a `Code-Frontend` or `Code-Backend` mode and is ready for review."
    priority: 800
    action: |
      <thinking>
      **[Initiate Code Review - Feature Lead]**
      My status is `[FEATURE_LEAD: PREPARING_CODE_REVIEW]`. Feature ID: `{context.feature_id}`.
      Coding work for task `{context.completed_coder_task_id}` (by `{context.original_assignee_mode_slug}`) on branch `feature/{context.feature_id}` is complete.
      I need to initiate a code review by delegating to `code-reviewer` mode.

      My process:
      1.  **First, update the status of the coding task `{context.completed_coder_task_id}` in `features/{context.feature_id}/progress.yaml` to 'in_review'.**
      2.  Then, prepare a comprehensive `new_task` message for `code-reviewer`, providing all necessary context.
      My status after delegation will be `[FEATURE_LEAD: AWAITING_CODE_REVIEW_FEEDBACK ({context.completed_coder_task_id})]`.
      </thinking>

      <thinking>
      Task `{context.completed_coder_task_id}` for feature '{context.feature_name}' is ready for review.
      I will first update its status in `progress.yaml` to 'in_review'.
      Let `{var_summary_from_coder}` be the summary of work from the coder's completion report.
      Let `{var_commit_hashes_from_coder}` be the commit hashes from the coder's report.
      </thinking>

      1.  **Update Task Status in `progress.yaml` (Before Review Delegation):**
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
          <!-- Wait for content -->
          <thinking>
          I have `progress.yaml`. I will find task `{context.completed_coder_task_id}` in the `tasks` map and update its `status` to 'in_review'. I'll also update the file's `last_updated` timestamp.
          </thinking>
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
            <content><!-- Full updated content of progress.yaml with task status 'in_review' --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
          <thinking>
          Status for task `{context.completed_coder_task_id}` updated. Now, prepare and send `new_task` to `code-reviewer`.
          My status after sending `new_task` will be `[FEATURE_LEAD: AWAITING_CODE_REVIEW_FEEDBACK ({context.completed_coder_task_id})]`.
          </thinking>

      2.  **Delegate Code Review Task:**
          "Code for task '{context.completed_coder_task_id}' is now 'in_review'. Delegating to Code-Reviewer mode."
          <new_task>
            <mode>code-reviewer</mode>
            <message>
            # YAML-like structure for Code Review Assignment
            task_id_for_reviewer: "{context.feature_id}-review-{context.completed_coder_task_id}" # Unique ID for this review task
            feature_id: "{context.feature_id}"
            feature_name: "{context.feature_name}"
            task_id_under_review: "{context.completed_coder_task_id}"
            task_name_under_review: "{context.name_of_completed_coder_task}" # FeatureLead needs to get this from progress.yaml or coder's report
            original_assignee_mode: "{context.original_assignee_mode_slug}"
            feature_branch: "feature/{context.feature_id}"
            commit_hashes_or_changeset: "{var_commit_hashes_from_coder}" # Or a description of the changeset

            summary_of_implemented_functionality: |
              {var_summary_from_coder}

            review_focus_instructions: |
              Please conduct a thorough review based on your standard code review guidelines and the provided context.
              Pay particular attention to correctness against requirements, adherence to project coding standards (global and feature-specific if any),
              code clarity, maintainability, test coverage adequacy, and any security aspects relevant to this implementation.

            # Context File Paths (relative to .roo/memory-bank/)
            feature_context_md_path: "features/{context.feature_id}/context.md"
            feature_design_notes_md_path: "features/{context.feature_id}/design_notes.md" # (if applicable for this task)
            feature_decisions_md_path: "features/{context.feature_id}/decisions.md"
            global_shared_patterns_path: "global/shared_system_patterns.md"
            global_architecture_path: "global/architecture_overview.md"

            reporting_instructions: |
              Submit your review feedback using `attempt_completion`.
              The report should include:
              - A list of specific findings (each with ID, severity, file/line, description, suggestion).
              - An overall assessment: 'Approved', 'Approved with minor comments', or 'Requires changes'.
            </message>
          </new_task>
          <!-- Feature-Lead's task is now frozen for this delegation. -->

  process_code_review_feedback:
    trigger: "When Feature-Lead receives code review feedback (via `attempt_completion`) from `code-reviewer` mode for a sub-task `{context.reviewed_task_id}` of feature {context.feature_id}."
    priority: 810
    action: |
      <thinking>
      **[Process Code Review Feedback - Feature Lead]**
      My status is `[FEATURE_LEAD: PROCESSING_REVIEW_FEEDBACK]`. Feature ID: `{context.feature_id}`. Task ID: `{context.reviewed_task_id}`.
      Received code review feedback for sub-task `{context.reviewed_task_id}` from `code-reviewer`.
      The feedback (from `code-reviewer`'s `attempt_completion` result) should be structured, including an overall assessment and detailed findings.

      I need to:
      1.  Parse the review feedback (overall assessment, list of findings).
      2.  Log feedback summary in `features/{context.feature_id}/active_log.md`.
      3.  Update status of `{context.reviewed_task_id}` in `features/{context.feature_id}/progress.yaml`.
      4.  If 'Requires changes':
          a.  **First, update Memory Bank (`active_log.md`, `progress.yaml` with status 'changes_required').**
          b.  **Then, formulate and delegate a rework sub-task to the original coder mode (`{context.original_assignee_mode_slug_for_reviewed_task}`), providing the reviewer's feedback.**
      5.  If 'Approved' or 'Approved with minor comments' (that original coder can address without full re-review):
          a.  Update `progress.yaml` to 'review_passed' or 'completed'.
          b.  If minor comments, create a small, quick follow-up task for the original coder (or they address it as part of this cycle).
          c.  Proceed to next phase (e.g., QA).
      </thinking>

      <!-- Example: `code-reviewer` for task `{context.reviewed_task_id}` submits "Requires changes". -->
      <thinking>
      Received review feedback for `{context.reviewed_task_id}`: Assessment 'Requires changes'.
      Detailed findings: [{finding1_details}, {finding2_details}...]
      Original assignee was `{context.original_assignee_mode_slug_for_reviewed_task}`.

      I will first log this feedback and update `progress.yaml`.
      My status will be `[FEATURE_LEAD: PREPARING_REWORK_TASK]`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
      <!-- Wait -->
      <thinking>
      Prepending to `active_log.md`:
      `[YYYY-MM-DD HH:MM:SS] - Code review feedback for task {context.reviewed_task_id} received from code-reviewer: Requires changes. Issues: [Summarize key issues from feedback]. Rework to be assigned to {context.original_assignee_mode_slug_for_reviewed_task}.`
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path>
        <content><!-- Full new content of active_log.md --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <thinking>
      Now, update status in `progress.yaml` for `{context.reviewed_task_id}` to 'changes_required'.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
      <!-- Wait -->
      <thinking>
      Updating task `{context.reviewed_task_id}` status to 'changes_required' in `progress.yaml`.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
        <content><!-- Full updated content of progress.yaml --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <thinking>
      Memory Bank updated. Now, delegate the rework task.
      Let `{var_rework_task_id}` = `{context.reviewed_task_id}-rework-01`.
      My status after sending `new_task` will be `[FEATURE_LEAD: AWAITING_REWORK ({var_rework_task_id})]`.
      </thinking>
      <new_task>
        <mode>{context.original_assignee_mode_slug_for_reviewed_task}</mode>
        <message>
        # YAML-like structure for Code Review Rework Task
        task_id: "{var_rework_task_id}"
        task_name: "Rework for Task: {context.reviewed_task_id} - {context.name_of_reviewed_task}"
        feature_id: "{context.feature_id}"
        feature_name: "{context.feature_name}"
        feature_branch: "feature/{context.feature_id}"
        original_task_ref: "{context.reviewed_task_id}"

        review_feedback_summary: |
          The recent code review for task '{context.reviewed_task_id}' by `code-reviewer` indicated that changes are required.
          Please address the following points:
          ---
          [Feature-Lead to paste the detailed, actionable feedback items from the code-reviewer's report here.
          Example:
          - Finding ID: CR-{context.reviewed_task_id}-001 / Severity: Major / File: backend/src/services/userService.ts:42 / Description: Missing null check for userData.profile... / Suggestion: Add guard clause...
          - Finding ID: CR-{context.reviewed_task_id}-002 / Severity: Minor / File: backend/src/controllers/authController.ts:78 / Description: Inconsistent error response... / Suggestion: Refactor to standard JSON error...
          ]
          ---

        action_required:
          - "Carefully address all 'Major' and 'Minor' severity findings listed above."
          - "Consider addressing 'Suggestion' items if feasible and beneficial."
          - "Commit your changes to the feature branch `feature/{context.feature_id}` following the Universal Commit Protocol."
          - "Ensure all unit tests pass and are updated if your changes affect them."
        
        reporting_instructions: "Notify me (Feature-Lead for {context.feature_id}) via `attempt_completion` when rework is complete. Provide new commit hashes. The code will then be submitted for re-review by `code-reviewer`."
        </message>
      </new_task>
      <!-- Feature-Lead's task is now frozen for this delegation. -->

      <!-- Alternative path: If review was 'Approved' or 'Approved with minor comments' -->
      <thinking>
      If review feedback for `{context.reviewed_task_id}` was 'Approved' (or 'Approved with minor comments' that the original coder can quickly address and commit without needing a full re-review cycle):
      1. Log this positive outcome in `features/{context.feature_id}/active_log.md`.
      2. Update status of `{context.reviewed_task_id}` in `features/{context.feature_id}/progress.yaml` to 'review_passed' or directly to 'completed' if no further action on that specific coding task is needed.
      3. My status becomes `[FEATURE_LEAD: ACTIVE]` or `[FEATURE_LEAD: PREPARING_QA]`.
      4. I would then proceed with the next logical step for the feature, such as initiating QA testing by triggering rules in `06-qa-coordination-and-bug-management.txt`.
      </thinking>
      <!--
      <attempt_completion>
        <result>
        Code review for task '{context.reviewed_task_id}' of feature '{context.feature_name}' is Approved. Memory Bank updated.
        The component/module is now ready for the next phase (e.g., QA or integration).
        </result>
      </attempt_completion>
      -->