qa_coordination_and_bug_management_feature_lead:
  initiate_qa_testing:
    trigger: "When all development sub-tasks for feature {context.feature_id} are completed (code on `main`), code reviews are passed, and the feature is considered 'dev complete' and ready for formal testing on the `main` branch."
    priority: 790
    action: |
      <thinking>
      **[Initiate QA Testing - Feature Lead]**
      My status is `[FEATURE_LEAD: COORDINATING_QA]`. Feature ID: `{context.feature_id}`.
      All development work and code reviews for feature '{context.feature_name}' (ID: {context.feature_id}) are complete on the `main` branch.
      It's time to delegate testing to `QA-Mode` on the `main` branch.

      I need to:
      1.  Prepare context for `QA-Mode` (requirements, branch info (`main`), bug reporting instructions).
      2.  **Crucially, update the status of the overall feature in `features/{context.feature_id}/progress.yaml` to 'in_qa' or 'testing' *before* delegating.**
      3.  Delegate the testing task to `qa-tester` mode slug using `new_task`.
      </thinking>

      "Feature '{context.feature_name}' (ID: {context.feature_id}) is dev complete on `main`. Updating status and preparing delegation to QA-Mode."

      1.  **Update `features/{context.feature_id}/progress.yaml` status to 'in_qa':**
          <thinking>
          I need to update the main feature `status` in `progress.yaml` to 'in_qa' (or 'testing').
          I'll also update the file's `last_updated` timestamp and `summary` to reflect it's entering QA on `main`.
          </thinking>
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
          <!-- Wait for content -->
          <thinking>
          I have `progress.yaml`. I will modify its content to set feature status to 'in_qa'.
          </thinking>
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
            <content><!-- Full updated content of progress.yaml with feature status 'in_qa' --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
          <thinking>
          Feature status in `progress.yaml` updated to 'in_qa'. Now, prepare and send the `new_task` to QA-Mode.
          My status will be `[FEATURE_LEAD: AWAITING_QA_RESULTS]` after this delegation.
          </thinking>

      2.  **Delegate to `QA-Mode`:**
          <new_task>
            <mode>qa-tester</mode>
            <message>
            **QA Testing Request for Feature: {context.feature_name} (ID: {context.feature_id})**

            **Branch for Testing:** `main`
            (Please ensure you have the latest version of the `main` branch.)

            **Objective:**
            Conduct comprehensive testing for the feature '{context.feature_name}' on the `main` branch to ensure it meets all specified requirements and acceptance criteria, is free of critical defects, and integrates correctly with other code on `main`.

            **Testing Scope & Focus:**
            *   Verify all user stories and acceptance criteria outlined in `features/{context.feature_id}/context.md`.
            *   Perform functional testing, usability testing (if applicable), and integration testing with other components on `main` as defined by the feature scope.
            *   Test API endpoints (if applicable) as per `features/{context.feature_id}/design_notes.md`.
            *   Focus on [Feature-Lead to add any specific areas of concern or new/complex functionality].

            **Context & Requirements:**
            *   Detailed Requirements & Acceptance Criteria: `./.roo/memory-bank/features/{context.feature_id}/context.md`.
            *   API Specifications (if applicable): `./.roo/memory-bank/features/{context.feature_id}/design_notes.md`.
            *   Feature-specific Decisions: `./.roo/memory-bank/features/{context.feature_id}/decisions.md`.

            **Bug Reporting:**
            *   Log all identified bugs with clear, reproducible steps, expected vs. actual results, and severity.
            *   Please log bugs by appending them to `./.roo/memory-bank/features/{context.feature_id}/active_log.md` under a "### Reported Bugs - YYYY-MM-DD" heading for each testing session. Include a unique Bug ID (e.g., BUG-{feature_id}-XXX).

            **Deliverables from QA:**
            *   A summary test report upon completion of the testing cycle.
            *   A list of all logged bugs with their IDs and severities.
            *   An overall assessment: 'QA Approved / Ready for Release', 'QA Approved with Minor Non-Blocking Bugs', or 'QA Failed / Requires Fixes'.
            *   Use `attempt_completion` to submit your test summary and bug list to me (Feature-Lead for {context.feature_id}).
            </message>
          </new_task>

  process_qa_results_and_manage_bugs:
    trigger: "When Feature-Lead receives a test summary and bug list (via `attempt_completion`) from `QA-Mode` for feature {context.feature_id} (tested on `main`)."
    priority: 820
    action: |
      <thinking>
      **[Process QA Results & Manage Bugs - Feature Lead]**
      My status is `[FEATURE_LEAD: PROCESSING_QA_RESULTS]`. Feature ID: `{context.feature_id}`.
      I've received QA results for feature {context.feature_id} (tested on `main`).

      My responsibilities:
      1.  Parse QA assessment and review reported bugs (verifying they are logged in `active_log.md`).
      2.  For each bug needing a fix (which will be fixed on `main`):
          a.  Update `features/{context.feature_id}/progress.yaml` to create a new sub-task for the bug fix, status 'backlog'.
          b.  Then, delegate these bugfix tasks to `Code-Frontend` or `Code-Backend` using `new_task` (to work on `main`).
      3.  Update overall feature status in `progress.yaml` based on QA assessment.
      4.  Decide next steps (re-test after fixes, coordinate tagging if QA approved, etc.).
      </thinking>

      <!-- Example: QA-Mode reports "QA Failed" with 2 critical bugs on `main`. -->
      <thinking>
      Received QA results for '{context.feature_name}' (on `main`): QA Failed.
      Bugs reported (assume QA logged them in `active_log.md`):
      - BUG-{feature_id}-001: Critical - User login crashes.
      - BUG-{feature_id}-002: High - Profile page data load error.

      I need to verify these bugs are in `active_log.md`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
      <!-- Wait for content -->
      <thinking>
      Confirmed bugs are logged.
      Now, I need to update `progress.yaml` to add sub-tasks for these bug fixes (on `main`).
      The overall feature status in `progress.yaml` might be set to 'bug_fixing'.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
      <!-- Wait for content -->
      <thinking>
      I have `progress.yaml`. I will add two new tasks to the `tasks` map and update feature status:
      - Task `{feature_id}-bugfix-001`: Name: "Fix: User login crash (BUG-{feature_id}-001) on main", assignee_mode_slug: "code-backend", status: "backlog", description_link: "active_log.md#BUG-{feature_id}-001"
      - Task `{feature_id}-bugfix-002`: Name: "Fix: Profile page data load (BUG-{feature_id}-002) on main", assignee_mode_slug: "code-frontend", status: "backlog", description_link: "active_log.md#BUG-{feature_id}-002"
      Feature status in `progress.yaml` becomes 'bug_fixing'.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
        <content><!-- Full updated content of progress.yaml with new bugfix tasks and updated feature status --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait for confirmation -->
      <thinking>
      Bugfix tasks created in `progress.yaml`.
      My status is now `[FEATURE_LEAD: MANAGING_BUGS]`.
      I will now proceed to delegate these bugfix tasks one by one (to be fixed on `main`).
      The delegation of these bugfix tasks will follow the logic in `02-sub-task-delegation-and-tracking.txt`.
      </thinking>
      "QA for feature '{context.feature_name}' on `main` found critical issues. Bugfix tasks have been created. I will now delegate these fixes."

      <!-- Example: QA-Mode reports "QA Approved" on `main`. -->
      <thinking>
      Received QA results for '{context.feature_name}' (on `main`): QA Approved. No critical bugs outstanding.
      I will update `features/{context.feature_id}/progress.yaml` to reflect feature status as 'qa_passed' or 'ready_for_tagging'.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
      <!-- Wait for content -->
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
        <content><!-- Updated progress.yaml with feature status 'qa_passed' --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait for confirmation -->
      <attempt_completion>
        <result>
        QA for feature '{context.feature_name}' (ID: {context.feature_id}) on `main` branch has passed. The feature status in `progress.yaml` is updated to 'qa_passed'. The feature is now stable on `main` and potentially ready for release tagging.
        </result>
      </attempt_completion>
      My status becomes `[FEATURE_LEAD: FEATURE_STABLE_ON_MAIN]`. Feature ID: `{context.feature_id}`.
      <!-- Feature-Lead will then trigger process from `04-version-control-main-branch-guidance.txt` (feature_integration_and_tagging_coordination) -->