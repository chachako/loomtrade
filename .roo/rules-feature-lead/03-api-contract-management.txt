api_contract_management_feature_lead:
  define_or_update_api_contract:
    trigger: "When a sub-task involves designing a new API, or modifying an existing API contract relevant to feature {context.feature_id}, typically after an API design task (e.g., task ID `{context.api_design_task_id}`) is completed by a `code-backend` or `code-frontend`."
    priority: 840
    action: |
      <thinking>
      **[Define/Update API Contract - Feature Lead]**
      My status is `[FEATURE_LEAD: MANAGING_API_CONTRACT]`. Feature ID: `{context.feature_id}`.
      An API contract for feature {context.feature_id} (related to design task `{context.api_design_task_id}`) needs to be defined/updated.
      The output of the design task (e.g., an OpenAPI snippet, Markdown description documented in `design_notes.md`) is my input.

      I need to:
      1.  Review the documented API contract in `features/{context.feature_id}/design_notes.md`.
      2.  Verify it against global API guidelines (`global/shared_system_patterns.md`) and feature requirements (`features/{context.feature_id}/context.md`).
      3.  If acceptable, log its finalization in `features/{context.feature_id}/active_log.md`.
      4.  Update the status of the API design task (`{context.api_design_task_id}`) in `features/{context.feature_id}/progress.yaml` to 'completed' or 'review_passed'.
      </thinking>

      <thinking>
      Reviewing API contract documented in `features/{context.feature_id}/design_notes.md` for design task `{context.api_design_task_id}`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/design_notes.md</path></read_file>
      <!-- Wait -->
      <read_file><path>./.roo/memory-bank/global/shared_system_patterns.md</path></read_file>
      <!-- Wait -->
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/context.md</path></read_file>
      <!-- Wait -->
      <thinking>
      Context loaded. Assuming API contract is reviewed and deemed acceptable.
      Now, log finalization in `active_log.md`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
      <!-- Wait -->
      <thinking>
      Prepending to `active_log.md`:
      `[YYYY-MM-DD HH:MM:SS] - API contract for design task {context.api_design_task_id} (e.g., 'product creation API') has been reviewed and finalized. Documentation is in design_notes.md. Implementation tasks should adhere to this.`
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path>
        <content><!-- Full new content of active_log.md --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <thinking>
      Now, update the status of the API design task `{context.api_design_task_id}` in `progress.yaml`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
      <!-- Wait -->
      <thinking>
      Updating task `{context.api_design_task_id}` status to 'completed' in `progress.yaml`.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
        <content><!-- Updated progress.yaml with task status updated --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <attempt_completion>
        <result>
        API contract related to design task '{context.api_design_task_id}' for feature '{context.feature_name}' has been reviewed, finalized, and logged. The design task status is updated. Implementation tasks can now proceed based on this contract.
        </result>
      </attempt_completion>
      My status becomes `[FEATURE_LEAD: ACTIVE]`. Feature ID: `{context.feature_id}`.

  ensure_contract_adherence_during_development:
    trigger: "When delegating frontend or backend sub-tasks that implement or consume an API defined for feature {context.feature_id}."
    priority: 830
    action: |
      <thinking>
      **[Ensure API Contract Adherence - Feature Lead]**
      This rule guides how I construct delegation messages.
      When using `delegate_sub_task` from `02-sub-task-delegation-and-tracking.txt` for a task `{task_id_being_delegated}` involving API implementation/consumption:
      The `new_task` message to `code-frontend` or `code-backend` (as defined in `02-...txt`) MUST include in its `detailed_task_description` or a dedicated `api_contract_reference` field:
      - A clear reference to the API contract document, e.g., "Please implement/consume the API as defined in `./.roo/memory-bank/features/{context.feature_id}/design_notes.md#api-section-for-this-task`."
      - Emphasis on adhering strictly to defined schemas, data types, and status codes.
      - Instruction to raise discrepancies or necessary deviations with me (Feature-Lead) immediately *before* non-compliant implementation.
      </thinking>
      "API contract adherence instructions will be included in relevant sub-task delegation messages."

  handle_api_contract_conflicts_or_changes:
    trigger: "When a `code-frontend` or `code-backend` mode reports a conflict with the API contract during implementation (task `{context.conflicting_task_id}`), or suggests a necessary change to an established API contract for feature {context.feature_id}."
    priority: 845
    action: |
      <thinking>
      **[Handle API Contract Conflict/Change - Feature Lead]**
      My status is `[FEATURE_LEAD: RESOLVING_API_CONFLICT]`. Feature ID: `{context.feature_id}`. Conflicting Task: `{context.conflicting_task_id}`.
      A sub-task mode reported an issue/change for an API contract.
      I need to:
      1.  Understand the issue/proposal from the reporting mode's message.
      2.  Assess impact. Consult other affected parties. Make a decision.
      3.  **If a fix/change is needed from another mode:**
          a.  Log the issue, my decision, and the plan to delegate correction in `features/{context.feature_id}/active_log.md`.
          b.  Update status of the original API implementation task (`{context.original_api_impl_task_id}`) in `progress.yaml` to 'correction_needed' or similar. Create a new task ID for the correction work (e.g., `{context.original_api_impl_task_id}-fix-01`).
          c.  **Then, use `new_task` to delegate the correction task to the appropriate mode, providing all necessary context for them to understand and execute the fix.**
      4.  If API contract document (`design_notes.md`) itself needs update due to an approved change, I will update it or delegate its update.
      5.  Communicate resolution/updated contract to all affected modes.
      </thinking>

      <!-- Example: Frontend (task `{context.conflicting_task_id}`) reports backend API (from task `{context.original_api_impl_task_id}`) is missing 'average_rating' field. -->
      <thinking>
      Issue reported by frontend regarding API from backend task `{context.original_api_impl_task_id}` (implemented by `{context.original_api_impl_assignee_slug}`).
      Step 1: Verify claim against `features/{context.feature_id}/design_notes.md`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/design_notes.md</path></read_file>
      <!-- Wait -->
      <thinking>
      Assuming `design_notes.md` confirms 'average_rating' should be there. This is a deviation.

      Step 2: Log issue, update progress, and prepare for delegation.
      My status will be `[FEATURE_LEAD: PREPARING_CORRECTION_TASK]`.
      Let `{var_correction_task_id}` = `{context.original_api_impl_task_id}-fix-01`.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
      <!-- Wait -->
      <thinking>
      Prepending to `active_log.md`:
      `[YYYY-MM-DD HH:MM:SS] - API DEVIATION DETECTED (reported by task {context.conflicting_task_id}): API from task {context.original_api_impl_task_id} is missing 'average_rating' field. Delegating correction task {var_correction_task_id} to {context.original_api_impl_assignee_slug}.`
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path>
        <content><!-- Full new content of active_log.md --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <thinking>
      Now update `progress.yaml`: change status of `{context.original_api_impl_task_id}` to 'correction_needed' and add new task `{var_correction_task_id}` with status 'delegated'.
      </thinking>
      <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
      <!-- Wait -->
      <thinking>
      Updating `progress.yaml`...
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
        <content><!-- YAML with original task status updated and new correction task {var_correction_task_id} added and marked 'delegated' --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->
      <thinking>
      Memory Bank updated. Now, delegate correction task to `{context.original_api_impl_assignee_slug}`.
      My status after sending `new_task` will be `[FEATURE_LEAD: AWAITING_SUB_TASK_COMPLETION ({var_correction_task_id})]`.
      </thinking>
      <new_task>
        <mode>{context.original_api_impl_assignee_slug}</mode> <!-- e.g., code-backend -->
        <message>
        # YAML-like structure for API Implementation Correction Task
        task_id: "{var_correction_task_id}"
        task_name: "API Correction: Add 'average_rating' to Get Product Details API"
        feature_id: "{context.feature_id}"
        feature_name: "{context.feature_name}"
        feature_branch: "feature/{context.feature_id}"
        original_task_ref: "{context.original_api_impl_task_id}" # Reference to the task that implemented the faulty API

        detailed_task_description: |
          The 'get product details API' (from your work on task {context.original_api_impl_task_id}) is missing the 'average_rating' field in its response.
          This field is specified in the API contract documented in `./.roo/memory-bank/features/{context.feature_id}/design_notes.md#[relevant-section-for-average_rating]`.
          This deviation was reported by the frontend integration effort (task {context.conflicting_task_id}).

        action_required:
          - "Review your implementation for task {context.original_api_impl_task_id}."
          - "Update the API to include the 'average_rating' field as per the contract."
          - "Ensure all existing unit/integration tests pass and add new tests if necessary for this field."
          - "Commit your changes to branch `feature/{context.feature_id}` following the Universal Commit Protocol."
        
        reference_documents:
          feature_design_notes_md_path: "features/{context.feature_id}/design_notes.md"
          # Add other relevant paths if needed by the coder mode

        reporting_instructions: "Upon completion, use `attempt_completion` with a summary of the fix and new commit hashes. This fix will likely need re-review by the Code-Reviewer."
        </message>
      </new_task>
      <!-- Feature-Lead's task is now frozen for this delegation. -->