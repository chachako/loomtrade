version_control_main_branch_guidance:
  commit_guidance_for_coders_on_main:
    trigger: "When delegating a coding sub-task to `Code-Frontend` or `Code-Backend` for feature {context.feature_id} that will be developed directly on the `main` branch."
    priority: 820
    action: |
      <thinking>
      **[Commit Guidance for Coders on Main - Feature Lead]**
      This rule guides how I construct delegation messages for tasks on the `main` branch.
      The `new_task` message to `Code-Frontend` or `Code-Backend` (as defined in `02-sub-task-delegation-and-tracking.txt`) MUST include in its `detailed_task_description` or a dedicated `version_control_instructions` field:
      - "All work MUST be done directly on the `main` branch."
      - "Before starting work, ensure your local `main` branch is up-to-date with the remote `origin/main` by running `git checkout main` and then `git pull origin main`."
      - "Follow the Universal Commit Protocol (`.roo/rules/01-universal-commit-protocol.txt`) for all commits. This protocol requires atomic commits with Conventional Commit formatted messages (all lowercase), including the task ID `({context.feature_id}/{task_id_for_commit})`."
      - "Ensure all unit tests pass before committing."
      - "Report all relevant commit hashes in your `attempt_completion` message when the sub-task is done."
      - "Push your changes on `main` to `origin/main` frequently, and especially before signaling task completion or requesting a code review. If multiple coders are working on `main` for different sub-tasks of this feature, coordinate pushes or rebase frequently to avoid large conflicts, although ideally sub-tasks are granular enough to minimize simultaneous conflicting changes."
      </thinking>
      "Commit guidance for working on `main` branch will be included in coding sub-task delegation messages for feature '{context.feature_name}'."

  feature_integration_and_tagging_coordination: # Replaces merge logic
    trigger: "When all sub-tasks for feature {context.feature_id} are completed, reviews passed, QA passed, and the feature is considered fully integrated and stable on the `main` branch (status in `progress.yaml` is 'qa_passed' or 'ready_for_tagging')."
    priority: 870
    action: |
      <thinking>
      **[Feature Integration & Tagging Coordination - Feature Lead]**
      My status is `[FEATURE_LEAD: COORDINATING_FEATURE_STABILIZATION_ON_MAIN]`. Feature ID: `{context.feature_id}`.
      Feature '{context.feature_name}' is now stable on the `main` branch.
      Since all development is on `main`, there's no feature branch to merge.
      My role here is to:
      1.  Ensure the `main` branch is indeed up-to-date and stable (this is largely confirmed by prior QA passing on `main`).
      2.  Log the successful integration and stability in `features/{context.feature_id}/active_log.md`.
      3.  Update feature status in `features/{context.feature_id}/progress.yaml` to 'completed_on_main' or 'ready_for_release_tagging'.
      4.  Report feature completion and stability on `main` to Project-Manager (via `07-reporting-to-project-manager.txt` logic), possibly suggesting it's ready for a version tag if it constitutes a releasable increment.
      </thinking>

      "Feature '{context.feature_name}' (ID: {context.feature_id}) is stable on `main`. Finalizing logs and status."

      1.  **Ensure Local `main` is Up-to-Date (Final Check):**
          <execute_command><command>git checkout main</command></execute_command>
          <!-- Wait -->
          <execute_command><command>git pull origin main</command></execute_command>
          <!-- Wait for confirmation -->
          <thinking>Local `main` is synchronized with remote.</thinking>

      2.  **Log Feature Stability on `main`:**
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
          <!-- Wait for content -->
          <thinking>
          Prepending to `active_log.md`:
          `[YYYY-MM-DD HH:MM:SS] - Feature '{context.feature_name}' (ID: {context.feature_id}) is now considered stable and complete on the 'main' branch. All development, reviews, and QA have passed on 'main'.`
          </thinking>
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path>
            <content><!-- Full new content of active_log.md --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->

      3.  **Update Feature Status in `progress.yaml`:**
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
          <!-- Wait for content -->
          <thinking>
          Updating feature status to 'completed_on_main' (or 'ready_for_release_tagging') in `features/{context.feature_id}/progress.yaml`.
          </thinking>
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
            <content><!-- Updated progress.yaml with feature status reflecting completion on main --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
      <thinking>
      Memory Bank updated.
      The next step is to report this to Project Manager. The reporting rule in `07-...txt` will handle the `attempt_completion` to PM.
      That report should highlight that the feature is complete and stable on `main`.
      If this feature completion warrants a new version tag for the project, Project Manager will initiate that with DevOps.
      </thinking>
      "Feature '{context.feature_name}' successfully stabilized on `main`. Memory Bank updated. Ready to report to Project Manager."
      My status becomes `[FEATURE_LEAD: FEATURE_STABLE_ON_MAIN]`. Feature ID: `{context.feature_id}`.
      <!-- This rule execution ends here. The next action will be reporting to PM via rule 07. -->