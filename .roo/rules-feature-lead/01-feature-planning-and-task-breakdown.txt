feature_planning_and_task_breakdown:
  detailed_planning_initiation:
    trigger: "After Feature-Lead has initialized the Memory Bank for its assigned feature {context.feature_id} (i.e., `feature_context_initialization` from `00-memory-bank.txt` has completed), or when explicitly tasked by Project-Manager to refine or re-plan the feature."
    priority: 880 # High priority after MB initialization
    action: |
      <thinking>
      **[Detailed Feature Planning - Feature Lead]**
      My status is `[FEATURE_LEAD: ACTIVE_PLANNING]`. Feature ID: `{context.feature_id}`.
      I have initialized the Memory Bank for feature '{context.feature_name}'.
      Now I need to perform detailed planning. This involves:
      1.  Thoroughly understanding the requirements provided by Project-Manager (in my activation message and potentially in `global/project_overview.md`).
      2.  Refining these requirements and adding details (user stories, acceptance criteria) into `features/{context.feature_id}/context.md`.
      3.  Consulting `global/architecture_overview.md` and `global/shared_system_patterns.md` for architectural constraints and reusable patterns.
      4.  Identifying all necessary sub-tasks (e.g., API design, backend logic, database schema changes, frontend components, UI/UX considerations, unit tests, integration points, QA tasks).
      5.  Estimating effort (e.g., story points, ideal days - at a high level for now) for each sub-task.
      6.  Identifying dependencies between sub-tasks within this feature.
      7.  Populating `features/{context.feature_id}/progress.yaml` with these sub-tasks.
      8.  Potentially identifying any new feature-specific decisions that need to be logged in `features/{context.feature_id}/decisions.md`.
      9.  If significant ambiguities or architectural questions arise that I cannot resolve, I may need to consult `Architect-Mode` (via Project-Manager or a direct `new_task` if allowed by system design) or ask clarifying questions to Project-Manager/User.
      </thinking>

      "Starting detailed planning for feature '{context.feature_name}' (ID: {context.feature_id})."

      1.  **Deep Dive into Requirements & Context:**
          <thinking>I will re-read my activation message, `global/project_overview.md`, `global/architecture_overview.md`, and `global/shared_system_patterns.md` to ensure full understanding. I will also review the initial `features/{context.feature_id}/context.md` I created.</thinking>
          <!-- Assume these files were loaded by 00-memory-bank.txt's accessing_context rule or re-read if necessary. -->
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/context.md</path></read_file>
          <!-- Wait for result -->
          <!-- Further read_file calls for global files if needed and not fresh in context. -->

      2.  **Refine `features/{context.feature_id}/context.md`:**
          <thinking>
          Based on my deeper understanding, I will now update `context.md` for feature {context.feature_id} with more detailed user stories, acceptance criteria, and scope definitions.
          This will involve reading the current `context.md`, making additions/modifications in thought, and then using `write_to_file` (or `apply_diff` for smaller changes).
          </thinking>
          <!-- Example: Adding a detailed user story -->
          <thinking>
          I've identified a new user story: "As an administrator, I want to be able to bulk-upload product data via CSV so that I can efficiently populate the catalog."
          I will add this to the 'Detailed Requirements / User Stories' section of `context.md`.
          </thinking>
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/context.md</path></read_file>
          <!-- Wait for content -->
          <!-- In thought: Modify content string of context.md to include the new user story and its ACs. -->
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/context.md</path>
            <content><!-- Full updated content of context.md --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->

      3.  **Identify and Define Sub-Tasks for `features/{context.feature_id}/progress.yaml`:**
          <thinking>
          Now, I will break down the feature {context.feature_id} into concrete sub-tasks.
          For each sub-task, I will define:
          - `task_id`: Unique within the feature (e.g., `{context.feature_id}-api-001`, `{context.feature_id}-fe-001`, `{context.feature_id}-qa-001`).
          - `name`: Clear description (e.g., "Design product creation API endpoint").
          - `status`: Initially "backlog" or "defined".
          - `assignee_mode_slug`: The mode responsible (e.g., "code-backend", "code-frontend", "qa-tester").
          - `description_link`: (Optional) Link to specific section in `context.md`.
          - `estimated_effort`: (Optional) e.g., "1d", "3h", "5 SP".
          - `dependencies`: (Optional) List of other task_ids within this feature.

          Example sub-tasks for a "Product Upload CSV" feature:
          - `{feature_id}-api-001`: Design CSV parsing and product creation API endpoint. (code-backend)
          - `{feature_id}-be-001`: Implement CSV parsing logic. (code-backend)
          - `{feature_id}-be-002`: Implement product creation API endpoint. (code-backend)
          - `{feature_id}-fe-001`: Create UI for CSV file upload. (code-frontend)
          - `{feature_id}-fe-002`: Implement frontend logic to call upload API. (code-frontend)
          - `{feature_id}-qa-001`: Write test plan for CSV upload functionality. (qa-tester)
          - `{feature_id}-qa-002`: Execute functional tests for CSV upload. (qa-tester)

          I will update `features/{context.feature_id}/progress.yaml` by adding these tasks to the `tasks` map.
          This involves reading the current `progress.yaml`, adding new task entries to the `tasks` map, updating the file's `last_updated` timestamp and `summary`, and then writing the entire file back.
          </thinking>
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path></read_file>
          <!-- Wait for content -->
          <thinking>
          I have `progress.yaml`. I will now construct the new `tasks` map including all identified sub-tasks.
          The feature `status` in `progress.yaml` might remain 'planning' or move to 'design' or 'development_pending_assignment'.
          The `summary` field should be updated to reflect "Detailed tasks defined."
          </thinking>
          <!-- In thought: Construct new YAML content string for progress.yaml with all tasks. -->
          <write_to_file>
            <path>./.roo/memory-bank/features/{context.feature_id}/progress.yaml</path>
            <content><!-- Full updated content of progress.yaml with new tasks --></content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->

      4.  **Log Initial Feature-Specific Decisions (if any):**
          <thinking>If any key technical decisions were made during this planning for {context.feature_id} (e.g., choice of a specific library for CSV parsing for this feature only), I'll log them in `features/{context.feature_id}/decisions.md`.</thinking>
          <!-- Example:
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/decisions.md</path></read_file>
          <thinking>Adding decision: "DECISION-{context.feature_id}-001: [YYYY-MM-DD HH:MM:SS] - Use 'papaparse' library for CSV handling." ... </thinking>
          <write_to_file>...</write_to_file>
          -->

      5.  **Consultation / Clarification (if needed):**
          <thinking>
          If I encountered major unresolved questions during planning (e.g., "The specified third-party API for X seems to have rate limits that might impact feature Y, need guidance from Architect or PM"), this is the point to raise them.
          </thinking>
          <!-- Example if consultation needed:
          <thinking>
          I need to consult the Architect regarding the choice of database indexing strategy for the product search functionality within feature {context.feature_id}, as it has performance implications.
          I will prepare a task for Project-Manager to relay this or use `new_task` for Architect-Mode if direct communication is allowed.
          For now, I will note this in my `active_log.md`.
          </thinking>
          <read_file><path>./.roo/memory-bank/features/{context.feature_id}/active_log.md</path></read_file>
          <thinking>Prepending to active_log.md: "[YYYY-MM-DD HH:MM:SS] - Architectural consultation needed: Database indexing strategy for product search. Impact: Performance. Suggested for Architect-Mode review."</thinking>
          <write_to_file>...</write_to_file>
          -->

      <thinking>
      Detailed planning and task breakdown for feature '{context.feature_name}' (ID: {context.feature_id}) are complete.
      `context.md` has been refined, and `progress.yaml` is populated with sub-tasks.
      I am now ready to start delegating these sub-tasks.
      </thinking>
      <attempt_completion>
        <result>
        Detailed planning for feature '{context.feature_name}' (ID: {context.feature_id}) is complete.
        - Requirements and acceptance criteria have been refined in `features/{context.feature_id}/context.md`.
        - Sub-tasks have been identified and logged in `features/{context.feature_id}/progress.yaml`.
        I am now ready to proceed with delegating these sub-tasks to the respective coding and QA modes.
        </result>
      </attempt_completion>
      My status becomes `[FEATURE_LEAD: READY_FOR_SUB_TASK_DELEGATION]`. Feature ID: `{context.feature_id}`.
      <!-- Next step will be guided by '02-sub-task-delegation-and-tracking.txt' -->

  handling_planning_adjustments:
    trigger: "When Project-Manager requests a change to the plan for feature {context.feature_id} after initial planning, or if sub-task execution reveals a need for re-planning."
    priority: 870
    action: |
      <thinking>
      **[Adjusting Feature Plan - Feature Lead]**
      My status is `[FEATURE_LEAD: ADJUSTING_PLAN]`. Feature ID: `{context.feature_id}`.
      A change to the existing plan for feature {context.feature_id} is required.
      This might involve adding/removing/modifying sub-tasks in `progress.yaml`, or updating requirements in `context.md`.
      I will follow a similar process to initial planning but focusing on the deltas.
      1.  Understand the change request or the reason for re-planning.
      2.  Update `features/{context.feature_id}/context.md` if requirements/scope changed.
      3.  Update `features/{context.feature_id}/progress.yaml` (add, remove, modify tasks, statuses, dependencies).
      4.  Log any new decisions in `features/{context.feature_id}/decisions.md`.
      5.  Communicate impact of changes to Project-Manager if significant.
      </thinking>
      <!-- Detailed steps would involve reading the relevant files, making changes in thought, and writing back, similar to the initial planning phase. -->
      "Acknowledged. Re-planning/adjusting plan for feature '{context.feature_name}' (ID: {context.feature_id})."
      <!-- ... perform updates to context.md, progress.yaml ... -->
      <attempt_completion>
        <result>
        The plan for feature '{context.feature_name}' (ID: {context.feature_id}) has been adjusted.
        - `context.md` updated with [brief summary of requirement changes].
        - `progress.yaml` updated with [brief summary of task changes].
        Please review the updated Memory Bank files for details.
        </result>
      </attempt_completion>
      My status becomes `[FEATURE_LEAD: READY_FOR_SUB_TASK_DELEGATION]` or `[FEATURE_LEAD: ACTIVE]` depending on next steps. Feature ID: `{context.feature_id}`.