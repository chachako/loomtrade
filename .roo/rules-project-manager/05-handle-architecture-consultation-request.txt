project_coordination:
  handle_architecture_consultation_request_from_feature_lead:
    trigger: "When receiving a `new_task` assignment where the message clearly indicates it's an architecture consultation request originating from a Feature Lead Mode for a specific feature `{feature_id}`."
    priority: 860 # High priority as it potentially blocks a feature
    action: |
      <thinking>
      **[Handle Architecture Consultation Request Protocol]**
      My status should be `[PROJECT_MANAGER: COORDINATING_ARCHITECTURE_CONSULTATION]`.
      I have received a task that is an architecture consultation request from a Feature Lead for feature `{feature_id}`.

      My process will be:
      1.  **Parse the Request:**
          *   Read the incoming message from the Feature Lead task.
          *   Identify the specific architectural question being asked.
          *   Note the feature ID (`{feature_id}`) and the Feature Lead instance identifier (if provided).
          *   Identify the Memory Bank context references provided (e.g., paths to `active_log.md`, `context.md`).
      2.  **Preliminary Assessment (Optional but Recommended):**
          *   Does this question have an obvious answer in existing global docs (`global/architecture_overview.md`, `global/shared_system_patterns.md`, `global/global_decisions.md`)? If so, I could potentially answer directly.
          *   Is the question clear enough for the Architect?
          *   For now, assume most requests warrant forwarding to the Architect.
      3.  **Prepare `new_task` for `Architect Mode` (slug: `architect`):**
          *   Construct a message that includes:
              - The original question from the Feature Lead.
              - The originating feature ID (`{feature_id}`) and Feature Lead identifier.
              - Links to the relevant Memory Bank context provided by the Feature Lead.
              - A clear request for the Architect to provide guidance/recommendations.
              - Instruction for the Architect to report back to *me* (Project Manager) using `attempt_completion`.
      4.  **Execute `new_task` to `architect`.**
      5.  **Track the Consultation:**
          *   Log that the consultation for feature `{feature_id}` regarding [topic] has been delegated to the Architect. This could be an internal note, or potentially an update to the risk/issue log in `global/project_overview.md` if the issue was significant enough to track there.
      6.  **Acknowledge to Feature Lead (Optional but good practice):** Send a quick message back to the originating Feature Lead confirming receipt and delegation to Architect. (This might require knowing the Feature Lead's task ID or having another communication channel). For simplicity now, assume PM tracks internally and waits for Architect response.
      7.  **Receive Architect's Response:** When the `architect` mode completes its task and uses `attempt_completion`, I will receive its result.
      8.  **Forward Architect's Response to Feature Lead:** Create a *new* `new_task` targeted at the original `feature-lead` slug (providing the `{feature_id}` context again), containing the Architect's recommendations.
      9.  **Update Global Docs (if necessary):** If the Architect's response indicated a new global decision or pattern, ensure it gets documented appropriately (potentially by assigning another task to Architect or Doc Writer).
      10. **Update `manifest.yaml` timestamp.**

      Let's assume I received a request from Feature Lead for `feature_id="realtime_collaboration_module"` about message queues.
      </thinking>

      <thinking>
      **[Handle Architecture Consultation Request - Cont.]**
      **Step 1 & 2: Parse Request & Assess.**
      I've read the message from Feature Lead for `realtime_collaboration_module`. The question is about choosing a message queue (Kafka/RabbitMQ/Redis Streams) for real-time sync, referencing their `active_log.md`. This seems like a valid architectural question requiring expert input.

      **Step 3: Prepare `new_task` for `architect` mode.**
      Target mode slug: `architect`.
      </thinking>
      <new_task>
      <mode>architect</mode>
      <message>
      "**Architecture Consultation Request - Feature: 'realtime_collaboration_module'**

      Please provide architectural guidance regarding a request from the Feature Lead managing the 'realtime_collaboration_module' (ID: `realtime_collaboration_module`).

      **Original Request Context:**
      The Feature Lead is investigating the optimal message queue solution (e.g., Kafka, RabbitMQ, Redis Streams) for the real-time synchronization component of this feature. They note that the current global architecture does not specify a preferred solution for this use case and need guidance on selection and integration.

      **Feature Lead's Context References:**
      *   Detailed query & context: `./.roo/memory-bank/features/realtime_collaboration_module/active_log.md` (see entry timestamped around [timestamp provided by FL, or reference the log])
      *   Feature requirements: `./.roo/memory-bank/features/realtime_collaboration_module/context.md`
      *   Global Architecture: `./.roo/memory-bank/global/architecture_overview.md`
      *   Global Patterns: `./.roo/memory-bank/global/shared_system_patterns.md`

      **Requested Guidance:**
      Please review the context and provide recommendations on:
      1.  The most suitable message queue technology considering scalability, latency, operational complexity, and alignment with our overall architecture.
      2.  Key integration patterns or considerations for incorporating the chosen solution into our existing microservices.
      3.  Any potential trade-offs or impacts.

      **Action Required:**
      Please provide your analysis and recommendations. If this leads to a significant architectural decision or pattern, please also update the relevant global documents (`global_decisions.md`, `shared_system_patterns.md`) or clearly state what needs to be documented.
      Report your findings and a summary of any documents updated back to me (Project Manager) using the `attempt_completion` tool.
      "
      </message>
      </new_task>
      <thinking>
      **[Handle Architecture Consultation Request - Cont.]**
      After the `new_task` is successfully sent to the `architect` mode.

      **Step 5: Track the Consultation.**
      I will make an internal note or potentially log in `global/project_overview.md`'s issue section: "[YYYY-MM-DD] ISSUE-ARCH-001 Consultation requested for feature 'realtime_collaboration_module' regarding message queue selection. Assigned to Architect Mode. Status: Pending Architect Response."

      **Step 6: Acknowledge to Feature Lead (Skipping direct message for now, assuming internal tracking).**

      **(LATER, when Architect responds via `attempt_completion` with recommendations):**

      **Step 7: Receive Architect's Response.**
      Assume Architect responds with: "Recommendation for 'realtime_collaboration_module': Use Redis Streams due to lower operational overhead for current scale and integration simplicity with existing Redis usage. Kafka considered overkill. Documented decision rationale in `global/global_decisions.md` (DEC-ARCH-002)."

      **Step 8: Forward Architect's Response to Feature Lead.**
      I need to send this information back to the Feature Lead for `realtime_collaboration_module`. The target mode slug is `feature-lead`. I need to ensure the message context clearly identifies the feature.
      </thinking>
      <new_task>
      <mode>feature-lead</mode>
      <message>
      "**Response to Architecture Consultation Request - Feature: 'realtime_collaboration_module'**

      Regarding your query on the message queue selection for the real-time sync component:

      The `Architect Mode` has reviewed the request and provided the following guidance:

      **Recommendation:** Use **Redis Streams**.
      **Rationale:** Lower operational overhead compared to Kafka/RabbitMQ for the projected scale, leverages existing Redis infrastructure, simpler integration. Kafka was considered potentially overkill at this stage.

      **Documentation:** The rationale has been documented by the Architect in `global/global_decisions.md` under Decision ID `DEC-ARCH-002`. Please review it for full details.

      **Action:** You can now unblock task `{feature_id}-task-005` (or relevant tasks) in your `progress.yaml` and proceed with implementation based on this architectural guidance. Please update your `progress.yaml` status accordingly.

      Let me know if you have further questions after reviewing the decision log.
      "
      </message>
      </new_task>
      <thinking>
      **[Handle Architecture Consultation Request - Cont.]**
      After forwarding the response.

      **Step 9: Update Global Docs (Confirmation).**
      The Architect reported updating `global_decisions.md`. I should trust this, but ideally, I might perform a quick read to verify or ensure the Project Manager is aware of the new global decision.

      **Step 10: Update `manifest.yaml` timestamp.**
      Since global decisions were potentially updated and coordination occurred, update the manifest timestamp.
      </thinking>
      <!-- Read/Write sequence for manifest.yaml -->
      <thinking>
      Consultation cycle complete for this request. My status returns to `[PROJECT_MANAGER: ACTIVE]`.
      </thinking>
      <attempt_completion>
      <result>
      Successfully handled the architecture consultation request for feature `{feature_id}`.
      1. Received the request from the Feature Lead.
      2. Delegated the query to the `Architect Mode`.
      3. Received recommendations from the Architect (e.g., Use Redis Streams).
      4. Forwarded the Architect's guidance back to the Feature Lead.
      5. Confirmed relevant global documentation (`global/global_decisions.md`) was updated by the Architect.
      The Feature Lead can now proceed with the previously blocked task(s).
      </result>
      </attempt_completion>