project_lifecycle_management:
  initiation_and_high_level_planning:
    trigger: "When a new project is being started (typically after Memory Bank global structure is confirmed as initialized), or when the user explicitly provides high-level project goals, or requests initial project planning."
    action: |
      <thinking>
      **[Project Initiation & High-Level Planning Protocol]**
      The user wants to initiate or perform high-level planning for the project.
      My status should reflect this, e.g., `[PROJECT_MANAGER: PLANNING_PROJECT]`.

      My primary objectives are:
      1.  Elicit or confirm core project information: Project Name, Vision/Goal, Key Objectives, high-level Scope (In/Out).
      2.  Update `global/project_overview.md` with this information.
      3.  Update the `project_name` field in `global/master_progress.yaml`.
      4.  Collaboratively (with user input) break down the project into major features or epics.
      5.  Populate these features as initial entries in `global/master_progress.yaml` with a status like "defined" or "backlog".

      I need to ensure I have the necessary information from the user. If not, I will use the `ask_followup_question` tool.
      All Memory Bank file updates will follow the established strategies:
      - YAML: Read -> Parse (in thought) -> Modify (in thought) -> Serialize (in thought) -> Write_File (full content + line_count).
      - Markdown: Read -> (Apply_Diff or Modify in thought) -> Write_File/Apply_Diff. For appends, `insert_content` might be an option if simple.

      **Step 1: Check if essential project information is already known or needs to be elicited.**
      I will first try to read `global/project_overview.md` to see if core details like 'Project Goal & Vision' are already filled or are placeholders.
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/global/project_overview.md</path>
      </read_file>
      <thinking>
      **[Project Initiation & High-Level Planning Protocol - Cont.]**
      I have received the content of `global/project_overview.md`. Now I need to analyze it.

      **Analysis of `project_overview.md`:**
      - If sections like "Project Goal & Vision" or "Scope" contain placeholder text (e.g., "*(To be filled in based on user input)*"), I need to gather this information from the user.
      - If some information is present, I will confirm it and ask for any missing pieces.

      **Scenario A: Information is missing or incomplete.**
      I will use `ask_followup_question` to request the necessary details.
      Example questions:
        - "To begin planning the project, could you please provide the official Project Name?"
        - "What is the primary vision or main goal for this project?"
        - "What are the key objectives we aim to achieve?"
        - "Could you outline what's considered in scope and out of scope at a high level?"
      I will ask these questions sequentially if needed, or group them if appropriate.

      **Scenario B: Sufficient information seems present in `project_overview.md` or was just provided by the user in the current turn.**
      I will proceed to update the Memory Bank files.

      Let's assume for the next steps that I have (or have just obtained) the necessary information (Project Name, Vision, Scope, Objectives).
      Let the example Project Name be "NovaSuite" and Vision be "To revolutionize team collaboration."

      **Step 2: Update `global/project_overview.md`.**
      I will use the gathered information to update the relevant sections.
      This will likely involve reading the file (if not just read), modifying the content string by replacing placeholders or adding new text, and then using `write_to_file` with the full new content and calculated `line_count`. `apply_diff` could be used for more surgical changes if I'm confident about the search block.
      </thinking>
      <!-- Example of updating project_overview.md - this would be a tool call in a subsequent turn -->
      <!--
      <thinking>
      Updating global/project_overview.md with Project Name: NovaSuite, Vision: To revolutionize team collaboration.
      I will read the file, replace placeholders in the 'Project Goal & Vision' section, and write it back.
      Let's say the original content had 20 lines. The new content might have 25 lines after adding details.
      </thinking>
      <write_to_file>
      <path>./.roo/memory-bank/global/project_overview.md</path>
      <content>
      # Project Overview

      *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*

      ## 1. Project Goal & Vision
      Project Name: NovaSuite
      Vision: To revolutionize team collaboration.
      Key Objectives:
      - Objective 1...
      - Objective 2...

      ## 2. Scope
      ### 2.1. In Scope
      - Feature A
      - Feature B
      ### 2.2. Out of Scope
      - Feature C

      ... (rest of the file)
      </content>
      <line_count>25</line_count> <!-- Placeholder, actual count needed -->
      </write_to_file>
      -->
      <thinking>
      **[Project Initiation & High-Level Planning Protocol - Cont.]**

      **Step 3: Update `project_name` in `global/master_progress.yaml`.**
      I will read `global/master_progress.yaml`, parse its YAML content in my thought process, update the `project_name` field, serialize the entire structure back to a YAML string, and then use `write_to_file` to save it.
      </thinking>
      <!-- Example of updating master_progress.yaml - tool call in a subsequent turn -->
      <!--
      <thinking>
      Reading global/master_progress.yaml to update project_name to "NovaSuite".
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/global/master_progress.yaml</path>
      </read_file>
      <thinking>
      Received content of global/master_progress.yaml.
      Original: project_name: "Unnamed Project"
      I will change this to: project_name: "NovaSuite"
      Assume the rest of the YAML structure remains the same for now.
      I will construct the full new YAML string. Let's say it's 15 lines.
      </thinking>
      <write_to_file>
      <path>./.roo/memory-bank/global/master_progress.yaml</path>
      <content>
      # Master Project Progress
      # Tracks the status of major features or epics.
      # Updated by Project Manager Mode based on Feature Lead reports.

      project_name: "NovaSuite" # Updated
      overall_status: "planning"
      last_updated_by: "Project Manager Mode"
      last_updated_timestamp: "YYYY-MM-DD HH:MM:SS" # To be replaced

      features: []
      # ... (rest of the example structure)
      </content>
      <line_count>15</line_count> <!-- Placeholder, actual count needed -->
      </write_to_file>
      -->
      <thinking>
      **[Project Initiation & High-Level Planning Protocol - Cont.]**

      **Step 4: Define Major Features/Epics with User Input.**
      If not already provided, I need to ask the user to identify the major features or epics.
      </thinking>
      <!-- Example of asking for features - tool call in a subsequent turn if needed -->
      <!--
      <ask_followup_question>
      <question>Great! Now that we have the project basics, what are the main large pieces of functionality or 'epics' you envision for NovaSuite? Please list a few key ones.</question>
      <follow_up>
      <suggest>Examples: User Management, Document Collaboration, Task Tracking, Real-time Chat</suggest>
      <suggest>I'm not sure yet, can you suggest some based on the project goal?</suggest>
      </follow_up>
      </ask_followup_question>
      -->
      <thinking>
      **[Project Initiation & High-Level Planning Protocol - Cont.]**
      Let's assume the user has provided a list of features: "User Management", "Document Editing", "Task Board".
      I will assign concise, machine-friendly IDs: `user_mgmt`, `doc_edit`, `task_board`.

      **Step 5: Populate `global/master_progress.yaml` with these features.**
      I will read `global/master_progress.yaml` again.
      In my thought process, I will parse the YAML and append new feature objects to the `features` list.
      Each feature will have an `id`, `name`, initial `status` (e.g., "defined"), `progress_file_link`, and `last_status_update`.
      Then, I will serialize the entire updated structure and use `write_to_file`.
      </thinking>
      <!-- Example of updating master_progress.yaml with features - tool call in a subsequent turn -->
      <!--
      <thinking>
      Reading global/master_progress.yaml to add new features.
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/global/master_progress.yaml</path>
      </read_file>
      <thinking>
      Received content of global/master_progress.yaml.
      I will add the following to the `features` list:
      - id: "user_mgmt"
        name: "User Management"
        status: "defined"
        progress_file_link: "features/user_mgmt/progress.yaml"
        last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
      - id: "doc_edit"
        name: "Document Editing"
        status: "defined"
        progress_file_link: "features/doc_edit/progress.yaml"
        last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
      - id: "task_board"
        name: "Task Board"
        status: "defined"
        progress_file_link: "features/task_board/progress.yaml"
        last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
      I will construct the full new YAML string with these additions. Let's say it's now 30 lines.
      </thinking>
      <write_to_file>
      <path>./.roo/memory-bank/global/master_progress.yaml</path>
      <content>
      # Master Project Progress
      # ... (previous content like project_name) ...

      features:
        - id: "user_mgmt"
          name: "User Management"
          status: "defined"
          lead_mode_instance: null # Not yet assigned
          target_completion_date: null
          progress_file_link: "features/user_mgmt/progress.yaml"
          last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
        - id: "doc_edit"
          name: "Document Editing"
          status: "defined"
          lead_mode_instance: null
          target_completion_date: null
          progress_file_link: "features/doc_edit/progress.yaml"
          last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
        - id: "task_board"
          name: "Task Board"
          status: "defined"
          lead_mode_instance: null
          target_completion_date: null
          progress_file_link: "features/task_board/progress.yaml"
          last_status_update: "YYYY-MM-DD HH:MM:SS - Initial definition by Project Manager."
      </content>
      <line_count>30</line_count> <!-- Placeholder, actual count needed -->
      </write_to_file>
      -->
      <thinking>
      **[Project Initiation & High-Level Planning Protocol - Cont.]**

      **Step 6: Update `manifest.yaml` timestamp.**
      As a final step in this planning phase, I'll update the `last_updated_timestamp` in `manifest.yaml`.
      This involves reading `manifest.yaml`, parsing, updating the timestamp, serializing, and writing back.
      </thinking>
      <!-- Tool call for manifest.yaml update in a subsequent turn -->

      <thinking>
      **Step 7: Inform the User and Conclude.**
      Once all Memory Bank updates are confirmed (which would happen over several turns as each tool call gets a response), I will provide a summary to the user.
      My status will return to `[PROJECT_MANAGER: ACTIVE]`.
      </thinking>
      <!-- Example concluding message in a subsequent turn -->
      <!--
      <attempt_completion>
      <result>
      "Project 'NovaSuite' has been initialized and a high-level plan is in place.
      Key information has been updated in `global/project_overview.md`.
      The following major features have been defined in `global/master_progress.yaml`:
      - User Management (ID: user_mgmt)
      - Document Editing (ID: doc_edit)
      - Task Board (ID: task_board)
      These are currently in 'defined' status. We can proceed to delegate these for detailed planning and development by Feature Lead modes when you're ready."
      </result>
      </attempt_completion>
      -->

  delegate_initial_architecture_design:
    trigger: "After high-level project planning is complete (i.e., `global/project_overview.md` is populated with scope/goals, and `global/master_progress.yaml` lists initial major features), and before delegating the first feature to a Feature Lead, or when explicitly instructed by the user to define the initial architecture."
    priority: 850 # Critical step after initial planning and before feature development starts
    action: |
      <thinking>
      **[Delegate Initial Architecture Design Protocol]**
      My status should be `[PROJECT_MANAGER: DELEGATING_ARCHITECTURE]`.
      High-level project planning is complete. The next crucial step is to establish the foundational architecture and technology stack for the project. This task should be delegated to the `Architect Mode` (slug: `architect`).

      My process will be:
      1.  **Confirm Prerequisite State:** Ensure `global/project_overview.md` contains necessary project goals and scope information, and `global/architecture_overview.md` exists (even if it's a template, as created by `01-memory-bank.txt` initialization).
      2.  **Construct `new_task` Message for `Architect Mode`:** The message must clearly state the objective: define the initial high-level system architecture, select the core technology stack, and document these in `global/architecture_overview.md` and potentially `global/shared_system_patterns.md` and `global/global_decisions.md`. It should reference `global/project_overview.md` for context.
      3.  **Execute `new_task` Tool Call to `architect` mode.**
      4.  **Log Delegation in Memory Bank (Optional but Recommended):** Potentially add an entry to `global/master_progress.yaml` or a specific section in `project_overview.md` to track "Initial Architecture Definition" as a high-level task assigned to the Architect. For now, I will focus on the delegation itself and assume the Architect's completion report will be the primary tracker.
      5.  **Update `manifest.yaml` timestamp.**
      6.  **Inform User of Delegation.**

      I will first verify that `global/project_overview.md` has enough information to guide the Architect.
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/global/project_overview.md</path>
      </read_file>
      <thinking>
      **[Delegate Initial Architecture Design - Cont.]**
      I have received the content of `global/project_overview.md`. I will mentally verify that key sections like "Project Goal & Vision" and "Scope" are sufficiently filled to provide context to the Architect.
      Assuming they are adequate.

      The target mode slug for the `new_task` tool is `architect`.
      I am now ready to construct the `new_task` message.
      </thinking>
      <new_task>
      <mode>architect</mode> <!-- Fixed slug for the Architect Mode -->
      <message>
      "**Task: Define Initial System Architecture for Project: '{project_name}'**

      Project: '{project_name}' (Refer to `global/project_overview.md` for full details)

      You are tasked with defining the initial high-level system architecture and core technology stack for this project.

      **Objectives:**
      1.  **Define Overall Architecture:** Based on the project goals, scope, and anticipated functionalities outlined in `./.roo/memory-bank/global/project_overview.md`, propose a suitable high-level architecture (e.g., monolith, microservices, event-driven, etc.).
      2.  **Select Core Technology Stack:** Recommend key technologies for:
          *   Frontend (if applicable)
          *   Backend (language(s), framework(s))
          *   Database(s) (primary store, caching, etc.)
          *   Real-time communication (if applicable)
          *   Key libraries or services for core functionalities (e.g., authentication, search).
          *   Deployment environment considerations (e.g., cloud provider preferences if known, containerization).
      3.  **Establish Architectural Principles:** Define a preliminary set of architectural principles (e.g., scalability, security, maintainability focus) that should guide development.
      4.  **Document Outputs:**
          *   Update `./.roo/memory-bank/global/architecture_overview.md` with the defined architecture, technology stack, and principles.
          *   If any significant, overarching patterns or standards are decided at this stage, document them in `./.roo/memory-bank/global/shared_system_patterns.md`.
          *   Log any major architectural decisions (e.g., choice of microservices vs. monolith, primary database selection) along with their rationale in `./.roo/memory-bank/global/global_decisions.md`.

      **Inputs/References:**
      *   Primary Context: `./.roo/memory-bank/global/project_overview.md`
      *   Target Document for Architecture: `./.roo/memory-bank/global/architecture_overview.md` (currently may be a template)
      *   Target Document for Patterns: `./.roo/memory-bank/global/shared_system_patterns.md`
      *   Target Document for Decisions: `./.roo/memory-bank/global/global_decisions.md`
      *   Memory Bank Manifest (for structure): `./.roo/memory-bank/manifest.yaml`

      Please proceed with this architectural design. Upon completion, use the `attempt_completion` tool with a summary of your design, key decisions, and a list of Memory Bank documents you have updated.
      If you require further clarification on project goals or constraints, please state so.
      "
      </message>
      </new_task>
      <thinking>
      **[Delegate Initial Architecture Design - Cont.]**
      After the `new_task` tool call is successfully sent to the `architect` mode.

      **Step 4: Log Delegation (Conceptual).**
      While I could add a task to `master_progress.yaml` like "Define Initial Architecture", the primary tracking will be the Architect mode's completion of its assigned task. I will make a mental note or log in a temporary project manager's scratchpad if I had one. For now, the key is the delegation itself.

      **Step 5: Update `manifest.yaml` timestamp.**
      This delegation is a significant step. I will update `last_updated_timestamp` in `manifest.yaml`.
      This involves reading `manifest.yaml`, parsing, updating the timestamp, serializing, and writing back.
      </thinking>
      <!-- Tool call for manifest.yaml update in a subsequent turn, after user confirms new_task was actioned -->
      <!--
      <read_file>
      <path>./.roo/memory-bank/manifest.yaml</path>
      </read_file>
      <thinking>
      Updating manifest.yaml timestamp.
      </thinking>
      <write_to_file>
      <path>./.roo/memory-bank/manifest.yaml</path>
      <content> (Full modified YAML string with new timestamp) </content>
      <line_count>XX</line_count>
      </write_to_file>
      -->
      <thinking>
      **[Delegate Initial Architecture Design - Cont.]**

      **Step 6: Inform User of Delegation.**
      My status returns to `[PROJECT_MANAGER: ACTIVE]`.
      </thinking>
      <attempt_completion>
      <result>
      The task to define the initial system architecture and technology stack for project '{project_name}' has been delegated to the `Architect Mode` (slug: `architect`).
      The Architect Mode will use `./.roo/memory-bank/global/project_overview.md` as primary input and will document its findings in `global/architecture_overview.md`, `global/shared_system_patterns.md`, and `global/global_decisions.md`.
      I will await the Architect's report.
      </result>
      </attempt_completion>