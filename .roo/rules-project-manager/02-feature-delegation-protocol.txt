feature_delegation_protocol:
  delegation_to_feature_lead:
    trigger: "After a feature module `{var_feature_id_to_delegate}` has been defined in `global/master_progress.yaml` and `manifest.yaml` (typically with status 'defined' by rule `01-project-decomposition.txt`), and Project-Manager decides it's ready for detailed planning and execution by a Feature-Lead."
    priority: 800
    action: |
      <thinking>
      **[Feature Delegation - Project Manager]**
      My status is `[PROJECT_MANAGER: PREPARING_FEATURE_DELEGATION]`.
      I have identified a feature (ID: `{var_feature_id_to_delegate}`, Name: `{var_feature_name_to_delegate}`) from `master_progress.yaml` that is in 'defined' state and needs to be delegated to a Feature-Lead instance.
      The conceptual Feature Lead instance name for tracking will be `{var_conceptual_fl_instance_name}` (e.g., "Feature-Lead-UserAuthentication").

      Process:
      1.  **Update Global Trackers First:**
          a.  Update `global/master_progress.yaml`: For feature `{var_feature_id_to_delegate}`, set `status` to 'delegated_to_feature_lead' and assign `lead_mode_instance` to `{var_conceptual_fl_instance_name}`. Update `last_status_update` timestamp. (Requires read-modify-write of YAML).
          b.  Update `manifest.yaml`: For feature `{var_feature_id_to_delegate}` in `feature_index`, update `status` and `lead_mode_instance`. Update manifest's root `last_updated` timestamp. (Requires read-modify-write of YAML).
      2.  If any file update fails, I must inform the user that delegation setup failed and log the error.
      3.  **Formulate `new_task` Message for Feature-Lead:**
          This message MUST be structured to provide all context Feature-Lead needs for its `feature_context_initialization` rule. Key fields: `task_id_for_fl` (unique), `feature_id`, `feature_name`, `initial_requirements_summary_and_goals`, `core_responsibilities`, `global_context_references`.
      4.  Delegate using `new_task` to the `feature-lead` mode slug.
      5.  If `new_task` creation fails, I must inform the user and log the error. Consider reverting Memory Bank changes or marking feature as 'delegation_failed'.
      My status after successful delegation will be `[PROJECT_MANAGER: AWAITING_FL_MILESTONE ({var_feature_id_to_delegate})]`.
      </thinking>

      <!-- Example: Delegating feature 'user_authentication' -->
      <thinking>
      Let `{var_feature_id_to_delegate}` = 'user_authentication'.
      Let `{var_feature_name_to_delegate}` = 'User Authentication System'. (This would be read from master_progress.yaml based on ID).
      Let `{var_conceptual_fl_instance_name}` = 'Feature-Lead-UserAuthentication'.
      Let `{var_initial_summary_for_fl}` = "Implement secure user registration (email/password with validation & hashing), login, session management, and basic password recovery. This system is foundational for all user-specific functionalities. Refer to `global/project_overview.md` for broader project context and `global/architecture_overview.md` for technical guidelines."

      **Step 1a: Update `global/master_progress.yaml`**
      </thinking>
      <read_file><path>./.roo/memory-bank/global/master_progress.yaml</path></read_file>
      <!-- Wait. If error, inform user and stop. -->
      <thinking>
      I have `master_progress.yaml`. I will parse it, find the feature `{var_feature_id_to_delegate}` in the `features` map.
      I will update its `status` to 'delegated_to_feature_lead', set `lead_mode_instance` to `{var_conceptual_fl_instance_name}`, and update `last_status_update` to current timestamp.
      Then, I will construct the new YAML content string for the entire file.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/global/master_progress.yaml</path>
        <content><!-- LLM generates complete updated YAML for master_progress.yaml --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait. If error, inform user and stop. -->

      <thinking>
      **Step 1b: Update `manifest.yaml`**
      </thinking>
      <read_file><path>./.roo/memory-bank/manifest.yaml</path></read_file>
      <!-- Wait. If error, inform user and stop. -->
      <thinking>
      I have `manifest.yaml`. I will parse it, find feature `{var_feature_id_to_delegate}` in `feature_index`.
      I will update its `status` to 'delegated_to_feature_lead' and `lead_mode_instance` to `{var_conceptual_fl_instance_name}`.
      I will also update the root `last_updated` timestamp in `manifest.yaml` to the current timestamp.
      Then, I will construct the new YAML content string for the entire file.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/manifest.yaml</path>
        <content><!-- LLM generates complete updated YAML for manifest.yaml --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait. If error, inform user and stop. -->

      <thinking>
      Global trackers updated.
      **Step 3 & 4: Formulate Message and Delegate to `feature-lead` mode.**
      Let `{var_task_id_for_fl}` = "FL-Task-{var_feature_id_to_delegate}-" + (new unique counter or timestamp).
      My status after successful `new_task` will be `[PROJECT_MANAGER: AWAITING_FL_MILESTONE ({var_feature_id_to_delegate})]`.
      </thinking>
      <new_task>
        <mode>feature-lead</mode> <!-- Slug for the Feature Lead mode type -->
        <message>
        # YAML-like structure for Feature Lead task assignment
        # This message will be parsed by Feature-Lead's `feature_context_initialization` rule.
        task_id: "{var_task_id_for_fl}" # Unique task ID for this overall feature management assignment
        requesting_mode_id: "Project-Manager" # Identifies who is assigning the task
        feature_id: "{var_feature_id_to_delegate}"
        feature_name: "{var_feature_name_to_delegate}"
        initial_requirements_summary_and_goals: |
          {var_initial_summary_for_fl}

        core_responsibilities: # High-level expectations for the Feature Lead
          - "Initialize Feature-Specific Memory Bank: Create and populate directory `./.roo/memory-bank/features/{var_feature_id_to_delegate}/` with standard files (`context.md`, `active_log.md`, `decisions.md`, `progress.yaml`, `design_notes.md`). Use the summary above to draft initial `context.md`."
          - "Detailed Feature Planning: Refine requirements in `context.md`. Break down the feature into all necessary sub-tasks (design, backend, frontend, QA, etc.) and log them in `progress.yaml` with assignees, dependencies, and estimates."
          - "Sub-Task Delegation & Tracking: Delegate sub-tasks to appropriate Coder and QA modes. Monitor their progress and manage any reported blockers or issues."
          - "API Contract Management: Oversee the definition and adherence to API contracts relevant to this feature, documented in `design_notes.md`."
          - "Version Control Adherence: Ensure all coding sub-tasks adhere to the project's universal commit protocol on their current working branches."
          - "Code Review & QA Coordination: Manage the code review process and coordinate QA testing cycles for the feature on current development branches."
          - "Stakeholder Reporting: Report major milestones (e.g., planning complete, ready for QA, QA passed, feature complete on branch) and critical blockers to Project-Manager."
          - "Risk Management (Feature-Level): Identify and manage risks specific to this feature, escalating to Project-Manager if necessary."

        global_context_references: # Paths to relevant global Memory Bank files
          project_overview_path: "./.roo/memory-bank/global/project_overview.md"
          architecture_overview_path: "./.roo/memory-bank/global/architecture_overview.md"
          shared_system_patterns_path: "./.roo/memory-bank/global/shared_system_patterns.md"
          risk_issue_register_path: "./.roo/memory-bank/global/risk_issue_register.md"

        initial_directive: "Please begin by initializing the Memory Bank for this feature. Then, proceed with detailed planning. Report back when planning is complete or if you encounter immediate high-level blockers that prevent planning."
        </message>
      </new_task>
      <!-- Wait for confirmation. If new_task fails, inform user, log error, potentially revert MB changes. -->
      <!-- Upon successful new_task, Project-Manager's active involvement in this specific delegation action is complete. -->
      <!-- The status AWAITING_FL_MILESTONE indicates PM is now passively monitoring. -->

  handle_feature_lead_report:
    trigger: "When Project-Manager receives an `attempt_completion` (which is a report) from a `Feature-Lead` mode regarding an assigned feature, identified by `{context.feature_id_from_fl_report}` in the report's content."
    priority: 790
    action: |
      <thinking>
      **[Handling Feature-Lead Report - Project Manager]**
      My status is `[PROJECT_MANAGER: PROCESSING_FL_REPORT]`. Feature ID from report: `{context.feature_id_from_fl_report}`.
      I have received a report from a Feature-Lead via `attempt_completion`. The result of `attempt_completion` should be a structured message or parsable text from the Feature-Lead, detailing a milestone, status update, blocker, or feature completion.

      Process:
      1.  Parse the report: Extract `feature_id`, new `status` (e.g., 'planning_complete', 'in_qa', 'blocked', 'completed_on_branch'), summary, next_steps_for_fl (if any), blockers (if any).
      2.  Update `global/master_progress.yaml`: Reflect the new status for `{context.feature_id_from_fl_report}`. Update `last_status_update` timestamp. (Requires read-modify-write of YAML).
      3.  Update `manifest.yaml`: Update status in `feature_index` for `{context.feature_id_from_fl_report}`. Update manifest's root `last_updated` timestamp. (Requires read-modify-write of YAML).
      4.  If any file update fails, I must log the error. The report processing might be incomplete.
      5.  Log Critical Info: If the report mentions global decisions made by FL (unlikely, FL should propose) or unmitigated high-impact risks that PM wasn't aware of, log them in appropriate global files (`global_decisions.md`, `risk_issue_register.md`).
      6.  Acknowledge report to Feature-Lead (if the system supports direct messaging back or if FL expects a new task for next steps). Often, FL just proceeds.
      7.  Communicate significant updates to the User (stakeholder) as per `04-status-reporting-and-communication.txt` if the milestone is major (e.g., feature completed, major blocker).
      8.  Determine Next Project Step based on the report (e.g., if feature 'completed_on_branch', PM might initiate integration planning or UAT).
      My status becomes `[PROJECT_MANAGER: ACTIVE]` or a specific follow-up status.
      </thinking>

      <!-- Example: Feature-Lead reports 'planning_complete' for 'user_authentication' -->
      <thinking>
      Received report from Feature-Lead for 'user_authentication'. Parsing result...
      Assume result contains: `feature_id: "user_authentication"`, `milestone_achieved: "Detailed Planning Complete"`, `new_status_for_master_progress: "planning_complete"`, `summary: "Detailed planning complete, sub-tasks defined in feature's progress.yaml."`, `next_steps_for_fl: "Ready to delegate dev tasks."`, `blockers: "None"`.

      **Action: Update `global/master_progress.yaml` and `manifest.yaml` for 'user_authentication'.**
      </thinking>
      <read_file><path>./.roo/memory-bank/global/master_progress.yaml</path></read_file>
      <!-- Wait. If error, log. -->
      <thinking>Updating status to 'planning_complete' for 'user_authentication' in `master_progress.yaml` and its `last_status_update`.</thinking>
      <write_to_file><path>./.roo/memory-bank/global/master_progress.yaml</path><content><!-- YAML with updated 'user_authentication' --></content><line_count>...</line_count></write_to_file>
      <!-- Wait. If error, log. -->

      <read_file><path>./.roo/memory-bank/manifest.yaml</path></read_file>
      <!-- Wait. If error, log. -->
      <thinking>Updating status for 'user_authentication' in `manifest.yaml` feature_index and manifest's root `last_updated`.</thinking>
      <write_to_file><path>./.roo/memory-bank/manifest.yaml</path><content><!-- YAML with updated 'user_authentication' and manifest --></content><line_count>...</line_count></write_to_file>
      <!-- Wait. If error, log. -->

      <thinking>
      Memory Bank updated for the 'planning_complete' milestone. This was an internal project milestone.
      No immediate user communication needed for this specific internal milestone unless part of a regular status update.
      The Feature Lead will proceed with sub-task delegation. My status for this feature remains `AWAITING_FL_MILESTONE (user_authentication)` for the *next* major milestone.
      </thinking>
      <attempt_completion>
        <result>
        Received and processed 'Detailed Planning Complete' update for feature 'user_authentication' from its Feature-Lead.
        Global project trackers (`master_progress.yaml`, `manifest.yaml`) have been updated.
        Awaiting next milestone report from the Feature-Lead for 'user_authentication'.
        </result>
      </attempt_completion>
      My status becomes `[PROJECT_MANAGER: ACTIVE]`. <!-- Or remains AWAITING_FL_MILESTONE -->

  monitoring_overall_progress:
    _comment: "Project-Manager monitors overall project progress using global/master_progress.yaml. This rule is more of a conceptual guideline for PM's proactive behavior rather than a direct trigger, unless a user asks for status or a scheduled check is due."
    action: |
      <thinking>
      **[Guideline: Monitoring Overall Progress - Project Manager]**
      I should periodically review `global/master_progress.yaml` to track the status of all features.
      If a feature (e.g., '{var_feature_id_to_check}') appears stalled or significantly delayed based on its `target_completion_date` or `last_status_update`, I should proactively inquire with its `lead_mode_instance`.

      To inquire:
      1.  Identify the `lead_mode_instance` (e.g., "Feature-Lead-FeatureX") and the `feature_id`.
      2.  Use `new_task` to the `feature-lead` mode slug, with a message structured for a status request:
          `task_type: "status_update_request"`
          `requesting_mode_id: "Project-Manager"`
          `feature_id: "{var_feature_id_to_check}"`
          `query: "Please provide a detailed status update for feature '{var_feature_name_to_check}' (ID: {var_feature_id_to_check}). Include progress on current sub-tasks, any blockers encountered, and an estimated ETA for the next major milestone. Refer to your feature's `progress.yaml` and `active_log.md`."`
      3.  My status for that specific feature inquiry would be `[PROJECT_MANAGER: AWAITING_FL_STATUS_UPDATE ({var_feature_id_to_check})]`.
      </thinking>