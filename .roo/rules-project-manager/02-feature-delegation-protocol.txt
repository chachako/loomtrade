feature_delegation_protocol:
  delegation_to_feature_lead:
    trigger: "After a feature module has been identified (by `01-project-decomposition.txt`), defined in `global/master_progress.yaml` and `manifest.yaml` with status 'defined', and Project-Manager decides it's ready for detailed planning and execution by a Feature-Lead."
    priority: 800
    action: |
      <thinking>
      **[Feature Delegation - Project Manager]**
      My status is `[PROJECT_MANAGER: PREPARING_FEATURE_DELEGATION]`.
      I have identified a feature (e.g., `{var_feature_id_to_delegate}`, Name: `{var_feature_name_to_delegate}`) from `master_progress.yaml` that is in 'defined' state and needs to be delegated.
      The conceptual Feature Lead instance name for tracking is `{var_conceptual_fl_instance_name}`.

      My process:
      1.  **Update Global Trackers First:**
          a.  Update `global/master_progress.yaml`: Set status of `{var_feature_id_to_delegate}` to 'delegated_to_feature_lead', add `lead_mode_instance: {var_conceptual_fl_instance_name}`.
          b.  Update `manifest.yaml`: Update `feature_index` for `{var_feature_id_to_delegate}` with status and `lead_mode_instance`. Update `last_updated` timestamp.
          (These updates involve read-modify-write sequences for YAML files).
      2.  **Formulate `new_task` Message for Feature-Lead:**
          This message MUST be structured to provide all context Feature-Lead needs for its `feature_context_initialization` rule.
          I will extract/formulate:
          - `task_id_for_fl`: A new unique task ID for this overall feature management task assigned to Feature-Lead (e.g., "FL-Task-{var_feature_id_to_delegate}").
          - `feature_id`: This is `{var_feature_id_to_delegate}`.
          - `feature_name`: This is `{var_feature_name_to_delegate}`.
          - `initial_requirements_summary`: A concise summary of goals/key requirements for this feature, extracted from user requests or my decomposition notes.
          - `global_context_paths`: List of paths to relevant global Memory Bank files.
          - `feature_lead_responsibilities`: A clear list of expectations for the Feature Lead.
      3.  **Delegate using `new_task` to `feature-lead` slug.**
      My status after delegation will be `[PROJECT_MANAGER: AWAITING_FL_MILESTONE ({var_feature_id_to_delegate})]`.
      </thinking>

      <!-- Example: Delegating feature 'user_authentication' -->
      <thinking>
      Let `{var_feature_id_to_delegate}` = 'user_authentication'.
      Let `{var_feature_name_to_delegate}` = 'User Authentication System'.
      Let `{var_conceptual_fl_instance_name}` = 'Feature-Lead-UserAuthentication'.
      Let `{var_initial_summary}` = "Implement secure user registration (email/password, validation, hashing), login, session management, and basic password recovery. Foundation for user-specific functions. Refer to global project overview for broader context."

      **Step 1a: Update `global/master_progress.yaml`**
      </thinking>
      <read_file><path>./.roo/memory-bank/global/master_progress.yaml</path></read_file>
      <!-- Wait -->
      <thinking>
      Updating 'user_authentication' in `master_progress.yaml`: status to 'delegated_to_feature_lead', lead_mode_instance to 'Feature-Lead-UserAuthentication'.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/global/master_progress.yaml</path>
        <content><!-- YAML content with 'user_authentication' feature status and lead_mode_instance updated --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->

      <thinking>
      **Step 1b: Update `manifest.yaml`**
      </thinking>
      <read_file><path>./.roo/memory-bank/manifest.yaml</path></read_file>
      <!-- Wait -->
      <thinking>
      Updating 'user_authentication' in `manifest.yaml`'s `feature_index`: path, status, lead_mode_instance. Updating manifest's `last_updated`.
      </thinking>
      <write_to_file>
        <path>./.roo/memory-bank/manifest.yaml</path>
        <content><!-- YAML content with 'user_authentication' in feature_index updated and manifest last_updated set --></content>
        <line_count>...</line_count>
      </write_to_file>
      <!-- Wait -->

      <thinking>
      Global trackers updated. Now, prepare and send the `new_task` to `feature-lead` mode.
      My status after sending `new_task` will be `[PROJECT_MANAGER: AWAITING_FL_MILESTONE (user_authentication)]`.
      </thinking>

      **Step 2 & 3: Formulate Message and Delegate to `feature-lead`**
      <new_task>
        <mode>feature-lead</mode>
        <message>
        # EXAMPLE: YAML-like structure for Feature Lead task assignment
        task_id: "FL-Task-user_authentication-01" # Unique task ID for this FL assignment
        requesting_mode_id: "Project-Manager"
        feature_id: "user_authentication"
        feature_name: "User Authentication System"
        initial_requirements_summary_and_goals: |
          The primary goal of this feature is to implement a robust user authentication system.
          This includes secure user registration (e.g., email/password, with appropriate validation and password hashing),
          user login, session management, and basic password recovery mechanisms.
          The system should be designed with security best practices in mind and provide a foundation for future
          user-specific functionalities. Refer to `global/project_overview.md` for overall project context.
        core_responsibilities:
          - "Initialize Feature Memory Bank: Create and populate directory `./.roo/memory-bank/features/user_authentication/` with `context.md`, `active_log.md`, `decisions.md`, `progress.yaml`. Use summary above to draft initial `context.md`."
          - "Detailed Planning: Refine requirements in `context.md`, break down feature into sub-tasks in `progress.yaml`."
          - "Version Control: Define and manage feature branch (e.g., `feature/user_authentication`) from `develop`."
          - "Sub-Task Delegation & Coordination: Delegate to `code-frontend`, `code-backend`, `code-reviewer`, `qa-tester`."
          - "Technical Oversight: Oversee API contracts, code quality, testing efforts."
          - "Reporting: Report major milestones (planning complete, ready for QA, QA passed, merged) and critical blockers to Project-Manager."
        global_context_references:
          project_overview_path: "./.roo/memory-bank/global/project_overview.md"
          architecture_overview_path: "./.roo/memory-bank/global/architecture_overview.md"
          shared_system_patterns_path: "./.roo/memory-bank/global/shared_system_patterns.md"
        initial_directive: "Please begin by initializing the Memory Bank for this feature, then proceed with detailed planning. Report back when planning is complete or if you encounter immediate high-level blockers."
        </message>
      </new_task>
      <!-- Project-Manager's task is now frozen for this delegation. -->

  handle_feature_lead_report:
    trigger: "When Project-Manager receives an `attempt_completion` (a report) from a `Feature-Lead` mode regarding an assigned feature {context.feature_id}."
    priority: 790
    action: |
      <thinking>
      **[Handling Feature-Lead Report - Project Manager]**
      My status is `[PROJECT_MANAGER: PROCESSING_FL_REPORT]`. Feature ID from report: `{context.feature_id_from_fl_report}`.
      I have received a report from the `Feature-Lead`. The `attempt_completion` result should be a structured message or parsable text.
      It should detail the milestone achieved, current status of feature `{context.feature_id_from_fl_report}`, any blockers, or feature completion.

      I need to:
      1.  **Parse the report:** Extract `feature_id`, new `status`, summary, next_steps_for_fl, blockers.
      2.  **Update `global/master_progress.yaml`:** Reflect the new status for `{context.feature_id_from_fl_report}`.
      3.  **Update `manifest.yaml`:** Update status in `feature_index` and `last_updated`.
      4.  **Log Critical Info:** If report mentions global decisions or unmitigated risks, log them.
      5.  **Communicate with User (if necessary):** As per `04-stakeholder-communication.txt`.
      6.  **Determine Next Project Step.**
      </thinking>

      <!-- Example: Feature-Lead reports 'planning_complete' for 'user_authentication' -->
      <thinking>
      Received report from Feature-Lead for 'user_authentication'. Parsing result...
      Assume result contains: `feature_id: "user_authentication"`, `new_status: "planning_complete"`, `summary: "Detailed planning complete..."`, `next_steps_for_fl: "Ready to delegate dev tasks."`, `blockers: "None"`.

      **Action: Update `global/master_progress.yaml` and `manifest.yaml` for 'user_authentication'.**
      </thinking>
      <read_file><path>./.roo/memory-bank/global/master_progress.yaml</path></read_file>
      <!-- Wait -->
      <thinking>Updating status to 'planning_complete' for 'user_authentication' in `master_progress.yaml`.</thinking>
      <write_to_file><path>./.roo/memory-bank/global/master_progress.yaml</path><content><!-- YAML with updated 'user_authentication' --></content><line_count>...</line_count></write_to_file>
      <!-- Wait -->
      <read_file><path>./.roo/memory-bank/manifest.yaml</path></read_file>
      <!-- Wait -->
      <thinking>Updating status for 'user_authentication' in `manifest.yaml` feature_index and manifest's last_updated.</thinking>
      <write_to_file><path>./.roo/memory-bank/manifest.yaml</path><content><!-- YAML with updated 'user_authentication' and manifest --></content><line_count>...</line_count></write_to_file>
      <!-- Wait -->
      <thinking>
      Memory Bank updated. This was an internal milestone.
      </thinking>
      <attempt_completion>
        <result>
        Received and processed 'planning_complete' update for feature 'user_authentication'.
        Global trackers updated. Awaiting next milestone from Feature-Lead.
        </result>
      </attempt_completion>
      My status becomes `[PROJECT_MANAGER: ACTIVE]`.

  monitoring_overall_progress:
    _comment: "Project-Manager monitors overall project progress using global/master_progress.yaml."
    action: |
      <thinking>
      If I need to proactively check the status of a feature (e.g., '{var_feature_id_to_check}') from `master_progress.yaml`:
      1.  Identify its `lead_mode_instance`.
      2.  Use `new_task` to `feature-lead` slug, with a message structured for a status request:
          `task_type: "status_update_request"`
          `feature_id: "{var_feature_id_to_check}"`
          `query: "Please provide a detailed status update, including current sub-task progress, any blockers, and ETA for next major milestone."`
      3.  My status would be `[PROJECT_MANAGER: AWAITING_FL_STATUS_UPDATE ({var_feature_id_to_check})]`.
      </thinking>