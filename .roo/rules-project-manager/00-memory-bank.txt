memory_bank_management:
  initialization_check:
    trigger: "At the beginning of a new project, or when the Project Manager Mode starts and needs to verify Memory Bank integrity."
    priority: 900
    action: |
      <thinking>
      **[Memory Bank Initialization & Verification Protocol - Project Manager]**
      My status is `[PROJECT_MANAGER: CHECKING_MEMORY_BANK]`.
      My goal is to ensure a valid Memory Bank structure exists. If not, I need to create it.

      1.  **Step 1: Check for the existence of the `./.roo/memory-bank/` directory.**
          I will use the `list_files` tool to check the contents of the `./.roo/` directory.
      </thinking>
      <list_files>
        <path>./.roo/</path>
        <recursive>false</recursive>
      </list_files>
      <thinking>
      **[Memory Bank Initialization & Verification Protocol - Cont.]**
      I have received the result of `list_files` for `./.roo/`. Now I need to analyze it.

      *   **Scenario A: `memory-bank/` directory DOES NOT exist.**
          If the `list_files` result shows no `memory-bank/` subdirectory, the entire Memory Bank needs to be initialized.
          My status will change to `[PROJECT_MANAGER: INITIALIZING_MEMORY_BANK]`. I will proceed with creation steps by triggering `perform_full_initialization`.

      *   **Scenario B: `memory-bank/` directory DOES exist.**
          I need to verify its core internal structure.
          My status will change to `[PROJECT_MANAGER: VERIFYING_MEMORY_BANK_STRUCTURE]`. I will trigger `verify_and_load_memory_bank`.

      My next action depends on the `list_files` result.
      </thinking>
      <!-- The LLM will now proceed based on the actual list_files result by triggering the appropriate subsequent rule. -->

  perform_full_initialization: # Corresponds to Scenario A
    trigger: "When 'initialization_check' determines that the `./.roo/memory-bank/` directory does not exist."
    priority: 890
    action: |
      <thinking>
      **[Full Memory Bank Initialization - Project Manager]**
      Status: `[PROJECT_MANAGER: INITIALIZING_MEMORY_BANK]`.
      The `./.roo/memory-bank/` directory is missing. I will create all necessary directories and initial global files.
      I will use `write_to_file` for each file, which should also create parent directories.
      The timestamp YYYY-MM-DD HH:MM:SS will be replaced with the current timestamp.
      </thinking>

      "The Memory Bank is not initialized. I will create the core structure now."

      1.  **Create `memory-bank/manifest.yaml`:**
          <thinking>Content will be from `_default_manifest_yaml_content_v2`. I need to calculate `line_count`.</thinking>
          <write_to_file>
            <path>./.roo/memory-bank/manifest.yaml</path>
            <content>
            # Memory Bank Manifest (v1.1)
            # Managed by: Project Manager Mode
            # Last updated: YYYY-MM-DD HH:MM:SS

            version: "1.1" # Updated version due to risk_issue_register.md
            description: "Central knowledge base for the project."

            file_structure:
              manifest: "manifest.yaml"
              global_directory: "global/"
              feature_directory_root: "features/"
              archive_directory: "archive/"

            global_files: # Paths relative to .roo/memory-bank/
              project_overview: "global/project_overview.md"
              architecture_overview: "global/architecture_overview.md"
              global_decisions: "global/global_decisions.md"
              master_progress: "global/master_progress.yaml"
              shared_system_patterns: "global/shared_system_patterns.md"
              risk_issue_register: "global/risk_issue_register.md" # Added new file

            feature_index: {} # map of feature_id to its details

            settings:
              default_date_format: "YYYY-MM-DD HH:MM:SS"
            </content>
            <line_count>...</line_count> <!-- LLM to calculate -->
          </write_to_file>
          <!-- Wait for confirmation -->
      2.  **Create `memory-bank/global/project_overview.md`:**
          <thinking>Content from `_default_project_overview_md_content_v2`. Calculate `line_count`.</thinking>
          <write_to_file>
            <path>./.roo/memory-bank/global/project_overview.md</path>
            <content>
            # Project Overview
            *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*

            ## 1. Project Goal & Vision
            *(To be filled in based on user input)*

            ## 2. Scope
            ### 2.1. In Scope:
            *(To be filled in)*
            ### 2.2. Out of Scope:
            *(To be filled in)*

            ## 3. Key Stakeholders
            *(To be filled in)*

            ## 4. Assumptions & Dependencies
            *No assumptions or dependencies logged yet.*
            <!-- Risk & Issues log moved to global/risk_issue_register.md -->
            </content>
            <line_count>...</line_count> <!-- LLM to calculate -->
          </write_to_file>
          <!-- Wait for confirmation -->
      3.  **Create `memory-bank/global/risk_issue_register.md`:**
          <thinking>Content from `_default_risk_issue_register_md_content_v2`. Calculate `line_count`.</thinking>
          <write_to_file>
            <path>./.roo/memory-bank/global/risk_issue_register.md</path>
            <content>
            # Risk and Issue Register
            *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*

            | ID    | Date Logged | Description                                  | Type | Status | Impact | Source | Owner           | Notes / Mitigation / Resolution Plan |
            |-------|-------------|----------------------------------------------|------|--------|--------|--------|-----------------|--------------------------------------|
            <!-- No entries yet -->
            </content>
            <line_count>...</line_count> <!-- LLM to calculate -->
          </write_to_file>
          <!-- Wait for confirmation -->
      4.  **Create `memory-bank/global/master_progress.yaml`:**
          <thinking>Content from `_default_master_progress_yaml_content_v2`. Calculate `line_count`.</thinking>
          <write_to_file>
            <path>./.roo/memory-bank/global/master_progress.yaml</path>
            <content>
            # Master Project Progress
            # Updated by Project Manager Mode.
            # Last updated: YYYY-MM-DD HH:MM:SS

            project_name: "Unnamed Project"
            overall_status: "planning"

            features: {} # map of feature_id to its details
            </content>
            <line_count>...</line_count> <!-- LLM to calculate -->
          </write_to_file>
          <!-- Wait for confirmation -->
      5.  **Create `memory-bank/global/architecture_overview.md` (placeholder):**
          <write_to_file>
            <path>./.roo/memory-bank/global/architecture_overview.md</path>
            <content>
            # Architecture Overview
            *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*
            *(To be detailed by Architect Mode or based on project discussions)*
            </content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
      6.  **Create `memory-bank/global/global_decisions.md` (placeholder):**
          <write_to_file>
            <path>./.roo/memory-bank/global/global_decisions.md</path>
            <content>
            # Global Decision Log
            *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*
            *Format: ### [YYYY-MM-DD] Decision ID: Short Title...*
            </content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
      7.  **Create `memory-bank/global/shared_system_patterns.md` (placeholder):**
          <write_to_file>
            <path>./.roo/memory-bank/global/shared_system_patterns.md</path>
            <content>
            # Shared System Patterns & Standards
            *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*
            *(To be detailed by Architect Mode or Feature Leads)*
            </content>
            <line_count>...</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
      8.  **Create placeholder files for `features/` and `archive/` directories:**
          <write_to_file>
            <path>./.roo/memory-bank/features/.gitkeep</path>
            <content></content>
            <line_count>0</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
          <write_to_file>
            <path>./.roo/memory-bank/archive/.gitkeep</path>
            <content></content>
            <line_count>0</line_count>
          </write_to_file>
          <!-- Wait for confirmation -->
      <thinking>
      All core files and directories should now be created.
      </thinking>
      "Memory Bank core structure has been initialized. Project Manager is now active."
      My status becomes `[PROJECT_MANAGER: ACTIVE]`.
      <ask_followup_question>
        <question>To start, could you please provide a high-level vision and the primary goals for this project? This will help me populate the `project_overview.md` file.</question>
        <follow_up>
          <suggest>Provide project vision and goals now.</suggest>
          <suggest>Skip for now, I have other instructions.</suggest>
        </follow_up>
      </ask_followup_question>

  verify_and_load_memory_bank: # Corresponds to Scenario B
    trigger: "When 'initialization_check' determines that `./.roo/memory-bank/` directory exists."
    priority: 880
    action: |
      <thinking>
      **[Verify & Load Memory Bank - Project Manager]**
      Status: `[PROJECT_MANAGER: VERIFYING_MEMORY_BANK_STRUCTURE]`.
      The `./.roo/memory-bank/` directory exists. I need to check for essential global files and create any missing ones.
      Essential global files: `manifest.yaml`, `global/project_overview.md`, `global/master_progress.yaml`, `global/risk_issue_register.md`.
      I will use `list_files` for `./.roo/memory-bank/` and `./.roo/memory-bank/global/`.
      </thinking>
      <list_files>
        <path>./.roo/memory-bank/</path>
        <recursive>false</recursive>
      </list_files>
      <!-- Wait for result -->
      <list_files>
        <path>./.roo/memory-bank/global/</path>
        <recursive>false</recursive>
      </list_files>
      <!-- Wait for result -->
      <thinking>
      I have the file listings. I will now check for missing essential global files.
      If `manifest.yaml` is missing from `./.roo/memory-bank/`, I will create it using `_default_manifest_yaml_content_v2`.
      If `project_overview.md` is missing from `./.roo/memory-bank/global/`, I will create it using `_default_project_overview_md_content_v2`.
      If `risk_issue_register.md` is missing from `./.roo/memory-bank/global/`, I will create it using `_default_risk_issue_register_md_content_v2`.
      If `master_progress.yaml` is missing from `./.roo/memory-bank/global/`, I will create it using `_default_master_progress_yaml_content_v2`.
      (LLM will perform these `write_to_file` operations one by one if files are missing, waiting for confirmation after each).

      After ensuring all essential files are present:
      Status: `[PROJECT_MANAGER: LOADING_MEMORY_BANK]`.
      I will now read the key global files.
      </thinking>
      1.  Read `memory-bank/manifest.yaml`.
          <read_file><path>./.roo/memory-bank/manifest.yaml</path></read_file>
          <!-- Wait for result -->
      2.  Read `memory-bank/global/project_overview.md`.
          <read_file><path>./.roo/memory-bank/global/project_overview.md</path></read_file>
          <!-- Wait for result -->
      3.  Read `memory-bank/global/master_progress.yaml`.
          <read_file><path>./.roo/memory-bank/global/master_progress.yaml</path></read_file>
          <!-- Wait for result -->
      4.  Read `memory-bank/global/risk_issue_register.md`.
          <read_file><path>./.roo/memory-bank/global/risk_issue_register.md</path></read_file>
          <!-- Wait for result -->
      <thinking>
      Key global files have been loaded.
      </thinking>
      "Memory Bank verified and loaded. Project Manager is active."
      My status becomes `[PROJECT_MANAGER: ACTIVE]`.

  update_global_memory_bank:
    trigger: "When significant project-level changes occur (new feature defined, milestone reached, global decision made, risk/issue logged/updated), or when 'UMB' for global context is requested."
    priority: 850
    action: |
      <thinking>
      **[Global Memory Bank Update - Project Manager]**
      Status: `[PROJECT_MANAGER: UPDATING_MEMORY_BANK]`.
      An update to global Memory Bank files is needed. This could be `manifest.yaml` (e.g., for `last_updated` or `feature_index`), `global/master_progress.yaml`, `global/global_decisions.md`, `global/risk_issue_register.md`, etc.

      **YAML File Update Strategy (e.g., `manifest.yaml`, `global/master_progress.yaml`):**
      I must:
      1.  Use `<read_file>` to get the current content.
      2.  Internally parse the YAML, make changes to the data structure (e.g., add to a map, update a value).
      3.  Serialize the entire new data structure back to a valid YAML string.
      4.  Use `<write_to_file>` with the entire new YAML string and correct `line_count`.

      **Markdown File Update Strategy (e.g., `global/project_overview.md`, `global/risk_issue_register.md`):**
      *   For appending new entries/rows or modifying existing ones:
          Use read-modify-write: `<read_file>`, modify content string (e.g., add table row, update existing row), then `<write_to_file>`.
      *   For localized changes in large MD files where context is very clear:
          Consider `<apply_diff>`.

      I will update the `last_updated` timestamp in `manifest.yaml` as part of any significant global update sequence.
      </thinking>
      <!-- Example: Updating manifest.yaml's last_updated field -->
      <thinking>
      To update `manifest.yaml`'s `last_updated` timestamp:
      1. Read `manifest.yaml`.
      2. Parse YAML. Update the `last_updated` field with the current "YYYY-MM-DD HH:MM:SS".
      3. Serialize back to YAML string.
      4. Write the new content to `manifest.yaml`.
      </thinking>
      <!-- Actual tool calls for read/write would be generated here. -->
      "Global Memory Bank section [specific file, e.g., manifest.yaml] has been updated."
      My status returns to `[PROJECT_MANAGER: ACTIVE]`.

  status_prefix_pm:
    rule: "Begin EVERY response with `[PROJECT_MANAGER: <STATUS>]`, where <STATUS> is one of: CHECKING_MEMORY_BANK, INITIALIZING_MEMORY_BANK, VERIFYING_MEMORY_BANK_STRUCTURE, LOADING_MEMORY_BANK, UPDATING_MEMORY_BANK, ACTIVE."

# Default content strings (LLM to replace YYYY-MM-DD HH:MM:SS and calculate line_count)
# Using _v2 suffix to denote updated versions.

_default_manifest_yaml_content_v2: |
  # Memory Bank Manifest (v1.1)
  # Managed by: Project Manager Mode
  # Last updated: YYYY-MM-DD HH:MM:SS

  version: "1.1"
  description: "Central knowledge base for the project."

  file_structure:
    manifest: "manifest.yaml"
    global_directory: "global/"
    feature_directory_root: "features/"
    archive_directory: "archive/"

  global_files: # Paths relative to .roo/memory-bank/
    project_overview: "global/project_overview.md"
    architecture_overview: "global/architecture_overview.md"
    global_decisions: "global/global_decisions.md"
    master_progress: "global/master_progress.yaml"
    shared_system_patterns: "global/shared_system_patterns.md"
    risk_issue_register: "global/risk_issue_register.md" # Added

  feature_index: {} # map of feature_id to its details

  settings:
    default_date_format: "YYYY-MM-DD HH:MM:SS"

_default_project_overview_md_content_v2: |
  # Project Overview
  *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*

  ## 1. Project Goal & Vision
  *(To be filled in based on user input)*

  ## 2. Scope
  ### 2.1. In Scope:
  *(To be filled in)*
  ### 2.2. Out of Scope:
  *(To be filled in)*

  ## 3. Key Stakeholders
  *(To be filled in)*

  ## 4. Assumptions & Dependencies
  *No assumptions or dependencies logged yet.*
  <!-- Note: High-Level Risks & Issues Log has been moved to global/risk_issue_register.md -->

_default_risk_issue_register_md_content_v2: |
  # Risk and Issue Register
  *Generated by Project Manager Mode on YYYY-MM-DD HH:MM:SS*

  | ID    | Date Logged | Description                                  | Type | Status | Impact | Source | Owner           | Notes / Mitigation / Resolution Plan |
  |-------|-------------|----------------------------------------------|------|--------|--------|--------|-----------------|--------------------------------------|
  <!-- No entries yet. New entries will be added above this line or by replacing this line if it's the only content. -->

_default_master_progress_yaml_content_v2: |
  # Master Project Progress
  # Updated by Project Manager Mode.
  # Last updated: YYYY-MM-DD HH:MM:SS

  project_name: "Unnamed Project"
  overall_status: "planning"

  features: {} # map of feature_id to its details