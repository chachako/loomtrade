code_review_execution_and_reporting:
  perform_code_review:
    trigger: "When Code-Reviewer's status is `READY_TO_REVIEW` for feature {context.feature_id}, original task {context.task_id_under_review}, and review task {context.task_id_for_reviewer} (meaning all context from `00-memory-bank-and-context.txt` has been loaded, including relevant coding standards)."
    priority: 900 # Core operational rule for this mode
    action: |
      <thinking>
      **[Perform Code Review - Code Reviewer]**
      My status is `[CODE-REVIEWER ({context.feature_id}/{context.task_id_under_review} - Review Task {context.task_id_for_reviewer}): REVIEWING_CODE]`.
      I have all context for task '{context.task_id_under_review}' of feature '{context.feature_id}'.
      Code to review is identified by commits: '{context.commit_hashes_or_changeset}' on the developer's current branch.
      Implemented by: `{context.original_assignee_mode}`.
      Functionality summary: `{context.summary_of_implemented_functionality}`.

      My review process:
      1.  **Code Access/Understanding (Conceptual):**
          *   Mentally "access" the code changes defined by `{context.commit_hashes_or_changeset}` on the developer's current branch. (The system provides me this view).
          *   Understand the scope of changes in relation to the `summary_of_implemented_functionality`.
      2.  **Systematic Review against Standards & Checklist:**
          *   Meticulously review the code against:
              a.  Feature requirements from `{context.feature_context_md_path}`.
              b.  Design specifications from `{context.feature_design_notes_md_path}`.
              c.  Specific coding standards for `{context.original_assignee_mode}` loaded from its `01-standards-and-practices.txt` (e.g., `.roo/rules-code-backend/01-standards-and-practices.txt`). This includes general coding principles, style, security, testing, and **dependency management protocols if dependencies were changed**.
              d.  The general `code_review_standards_checklist` defined within this rule file for broader quality aspects.
              e.  Project-level preferences from `global/coding_preferences.md` if applicable and loaded.
      3.  **Identify & Document Findings:** For each issue or suggestion:
          *   Assign a unique finding ID (e.g., CR-{context.task_id_for_reviewer}-001).
          *   Note file path and relevant line number(s).
          *   Clearly describe the finding.
          *   Assign a severity (Critical, Major, Minor, Suggestion, Question).
          *   Reference the specific standard/requirement/guideline violated or relevant (from coding standards file, checklist, or feature docs).
          *   Suggest a concrete action or improvement if possible.
      4.  **Formulate Overall Assessment:** Based on number and severity of findings: 'Approved', 'Approved_With_Minor_Comments', or 'Requires_Changes'.
      5.  **Prepare Feedback Report:** Structure all findings and the overall assessment clearly.
      6.  Use `attempt_completion` to send the report to the Feature Lead.
      </thinking>

      <thinking>
      I am now "reviewing" the code changes for task '{context.task_id_under_review}'.
      I will cross-reference with requirements (`{context.feature_context_md_path}`), design (`{context.feature_design_notes_md_path}`), global patterns (`{context.global_shared_patterns_path}`), architecture (`{context.global_architecture_path}`), and crucially, the specific coding standards for `{context.original_assignee_mode}` (e.g., `{var_coding_standards_path}`).

      *Simulating review process and finding issues based on the loaded standards and checklist.*
      Let's assume the code is from `code-backend` and I'm using its `01-standards-and-practices.txt`.
      Example Finding 1 (Violates Backend Standard - Error Handling):
        ID: CR-{context.task_id_for_reviewer}-001
        File: backend/src/services/userService.ts, Line: 42
        Severity: Major
        Description: "The `getUserDetails` function catches a generic `Error` (e.g. `catch(e)`) and returns a generic 500 without logging the specific error or stack trace. This violates the 'Error Handling & Logging' standard in backend practices which requires specific error handling and structured logging."
        Standard Ref: `.roo/rules-code-backend/01-standards-and-practices.txt` (section: `error_handling_and_logging`).
        Suggestion: "Refactor to catch specific expected errors. Log the full error details using the project's standard logger before returning a structured error response to the controller."

      Example Finding 2 (Violates General Readability - from Checklist):
        ID: CR-{context.task_id_for_reviewer}-002
        File: backend/src/controllers/authController.ts, Line: 78-95
        Severity: Minor
        Description: "A complex conditional block with multiple nested `if/else if` statements. Difficult to follow logic for different authentication scenarios."
        Standard Ref: `code_review_standards_checklist` (Category: "Readability, Maintainability & Simplicity").
        Suggestion: "Consider refactoring this logic into smaller helper functions or using a switch statement or a more declarative pattern to improve clarity."
      </thinking>
      <thinking>
      Based on the (simulated) findings (1 Major, 1 Minor), the Overall Assessment is: **Requires_Changes**.
      I will now compile these findings into a structured report.
      My status becomes `[CODE-REVIEWER ({context.feature_id}/{context.task_id_under_review} - Review Task {context.task_id_for_reviewer}): PREPARING_FEEDBACK]`.
      </thinking>
      <attempt_completion>
        <result>
        # Code Review Feedback Report
        **Review Task ID:** {context.task_id_for_reviewer}
        **Feature ID:** {context.feature_id} ({context.feature_name})
        **Original Task Under Review:** {context.task_id_under_review} ({context.task_name_under_review})
        **Original Assignee Mode:** {context.original_assignee_mode}
        **Reviewed Commits/Changeset:** {context.commit_hashes_or_changeset} (on developer's current branch)
        **Reviewer:** Code-Reviewer Mode
        **Date:** YYYY-MM-DD HH:MM:SS <!-- Current timestamp -->

        **Overall Assessment: Requires_Changes**

        **Detailed Findings:**

        1.  **Finding ID:** CR-{context.task_id_for_reviewer}-001
            **Severity:** Major
            **File & Line:** `backend/src/services/userService.ts:42`
            **Description:** Generic error catching in `getUserDetails` function without specific logging or structured error response.
            **Standard Reference:** Violation of error handling and logging standards in `.roo/rules-code-backend/01-standards-and-practices.txt`.
            **Suggestion:** Refactor to catch specific errors, log full error details with stack trace, and return a structured error response.

        2.  **Finding ID:** CR-{context.task_id_for_reviewer}-002
            **Severity:** Minor
            **File & Line:** `backend/src/controllers/authController.ts:78-95`
            **Description:** Complex nested conditional logic for authentication scenarios is difficult to read and maintain.
            **Standard Reference:** Readability concerns as per general code review checklist.
            **Suggestion:** Consider refactoring into smaller helper functions or using a more declarative pattern (e.g., switch statement, state machine if applicable) for clarity.

        *(Additional findings would be listed here if found)*

        **General Comments (Optional):**
        The code generally follows the structure expected for `{context.original_assignee_mode}`. Primary concerns are around robust error handling and improving clarity in complex logical blocks.

        **Next Steps:**
        The original assignee (`{context.original_assignee_mode}`) should address the 'Major' and 'Minor' severity findings.
        Please resubmit the code for review after changes are made on the current working branch.
        </result>
      </attempt_completion>
      My status becomes `[CODE-REVIEWER ({context.feature_id}/{context.task_id_under_review} - Review Task {context.task_id_for_reviewer}): COMPLETED_AWAITING_NEW]`.

  code_review_standards_checklist: # General checklist, supplemented by specific mode standards
    title: "General Code Review Standards Checklist (Applied by Code-Reviewer)"
    categories:
      - name: "1. Correctness & Functionality"
        items:
          - "Does the code fulfill requirements from `features/{context.feature_id}/context.md`?"
          - "Does it implement logic/algorithms from `features/{context.feature_id}/design_notes.md` accurately?"
          - "Are edge cases, error conditions, and boundary values handled correctly?"
          - "Does it produce correct output for valid/invalid inputs?"
          - "Any logical flaws, off-by-one errors, race conditions?"
          - "Safe handling of null/undefined/empty values?"
      - name: "2. Readability, Maintainability & Simplicity"
        items:
          - "Is code clear, concise, well-organized?"
          - "Are names descriptive, unambiguous, consistent with project/language conventions (ref specific standards)?"
          - "Is formatting consistent (ref specific standards & linters)?"
          - "Are comments effective (explaining 'why' for complex parts, not 'what')?"
          - "Is complex logic decomposed into smaller, single-responsibility units?"
          - "Unnecessary complexity? (KISS principle)"
          - "DRY (Don't Repeat Yourself)? Common logic abstracted?"
          - "Dead or commented-out code removed (unless temporary with TODO)?"
      - name: "3. Adherence to Design, Architecture & API Contracts"
        items:
          - "Aligns with `global/architecture_overview.md` and feature decisions in `features/{context.feature_id}/decisions.md`?"
          - "Strict adherence to API contracts from `features/{context.feature_id}/design_notes.md`?"
          - "Appropriate use of shared patterns from `global/shared_system_patterns.md`?"
          - "Correct use of established design patterns?"
      - name: "4. Testing & Testability (as per specific Coder mode's standards)"
        items:
          - "Sufficient unit/component tests covering critical logic, paths, edge cases?"
          - "Adequate integration tests if applicable?"
          - "Do all automated tests (expected to be run by Coder) pass with these changes?"
          - "Are tests readable, maintainable, independent, reliable?"
          - "Dependencies correctly mocked/stubbed in unit tests?"
          - "Is code structured for easy testability?"
      - name: "5. Security (as per specific Coder mode's standards)"
        items:
          - "Input validation/sanitization (client-side for UX, server-side authoritative)?"
          - "Risks of common vulnerabilities (SQLi, XSS, CSRF etc.) mitigated?"
          - "AuthN/AuthZ correctly implemented and enforced?"
          - "Secrets handled securely (no hardcoding/logging)?"
          - "Sensitive data protected (encryption, hashing)?"
          - "Third-party dependencies vetted (ref Coder's dependency protocols)?"
      - name: "6. Performance & Efficiency (as per specific Coder mode's standards)"
        items:
          - "Obvious performance anti-patterns or bottlenecks?"
          - "Efficient memory usage? Risk of leaks?"
          - "Appropriate data structures/algorithms?"
          - "Caching considered where beneficial?"
      - name: "7. Error Handling & Logging (as per specific Coder mode's standards)"
        items:
          - "Robust and comprehensive error handling? Specific errors caught?"
          - "Clear, informative error messages (no sensitive details exposed)?"
          - "Logging according to project standards (structured, levels, context, no sensitive data)?"
          - "Resources properly released (files, connections)?"
      - name: "8. Code-Level Documentation & Clarity (as per specific Coder mode's standards)"
        items:
          - "Public APIs of functions/classes/components documented (TSDoc/JSDoc etc.)?"
          - "Complex internal logic adequately commented?"
          - "Types used effectively (TypeScript, Python type hints)?"
      - name: "9. Configuration & Environment" # More general
        items:
          - "Configurable parameters managed via config/env vars, not hardcoded?"
      - name: "10. Language/Framework Best Practices (as per specific Coder mode's standards)"
        items:
          - "Adherence to idiomatic expressions and best practices for the language/framework?"
          - "Modern language features used appropriately?"
          - "Deprecated features/libraries avoided?"