# Frontend Development Standards, Practices, and Dependency Management Protocols
# This document outlines mandatory standards, recommended practices,
# and required dependency management protocols for frontend code (TypeScript-focused).
# It MUST be referenced and adhered to by Code-Frontend Mode during task execution.

# STANDARDS APPLICATION HIERARCHY:
# When implementing tasks, Code-Frontend Mode MUST prioritize standards and preferences in the following order:
# 1.  **User's Direct Instructions/Feedback for the Current Task:** Specific instructions or feedback provided by the user for the immediate task at hand override all other guidelines.
# 2.  **Project-Level Coding Preferences:** Guidelines and preferences documented in `./.roo/memory-bank/global/coding_preferences.md` (if this file exists and contains relevant frontend preferences).
# 3.  **This Standards Document:** The rules and protocols defined within this file (`.roo/rules-code-frontend/01-standards-and-practices.txt`).
# 4.  **General AI Knowledge & Best Practices:** The AI's foundational knowledge of software engineering principles and common best practices should be applied when no specific higher-priority guideline exists.

general_guidelines:
  title: "General Coding Standards and Best Practices"
  description: "Ensure frontend code is readable, maintainable, performant, accessible, secure, and robust."
  principles:
    - "Follow SOLID principles where applicable in component and module design (e.g., Single Responsibility for components)."
    - "Adhere to the DRY (Don't Repeat Yourself) principle; encapsulate reusable UI components and logic into hooks, utilities, or services."
    - "Write code that is self-explanatory. Use comments primarily for complex logic, non-obvious rationale, API contracts of components (props, events), or JSDoc/TSDoc for type augmentation where needed."
    - "Prioritize consistency in naming, structure, and patterns throughout the frontend codebase."
    - "Implement user-friendly error handling and provide clear feedback to the user."

code_style_and_formatting:
  linter_formatter:
    rule: "ESLint (with appropriate TypeScript plugins like `@typescript-eslint/eslint-plugin`) and Prettier MUST be used for code linting and formatting. Adhere strictly to the project's shared configurations (e.g., `.eslintrc.js`, `.prettierrc.js` if present in project root or `frontend/`)."
    note: "All linter/formatter reported errors/warnings MUST be resolved before considering a task complete or submitting code for review."
  indentation:
    rule: "Use 2 spaces for indentation in all `.ts`, `.tsx`, `.js`, `.jsx`, `.vue`, `.html`, `.css`, `.scss`, `.less` files. Tabs are strictly prohibited. Follow Prettier config if available."
  naming_conventions:
    variables_functions_props: "Use camelCase (e.g., `userProfileData`, `calculateTotalPrice`, `isLoading`). For Vue props, kebab-case is used in templates but camelCase in `<script setup lang='ts'>`."
    constants: "Use UPPER_SNAKE_CASE (e.g., `API_BASE_URL`, `MAX_ITEMS_PER_PAGE`)."
    components_classes_interfaces_types_enums: "Use PascalCase (e.g., `UserProfileCard`, `AuthService`, `IUser`, `OrderStatus`). Component file names should match the component name (e.g., `UserProfileCard.vue`, `RegistrationForm.tsx`). Type/Interface files might be `types.ts` or feature-specific."
    css_classes_ids: "Use kebab-case (e.g., `user-profile-card`, `submit-button-primary`), BEM (`block__element--modifier`), or a convention dictated by the chosen CSS methodology (e.g., Tailwind CSS utility classes, CSS Modules generated class names)."
  file_structure:
    rule: "Follow the established project directory structure within `frontend/src/` (e.g., `components/`, `views/` or `pages/`, `services/` or `api/`, `store/` or `composables/`, `utils/`, `assets/`, `router/`, `types/`). Group components by feature or commonality. Test files (e.g., `*.spec.ts`) should be co-located or in a `__tests__` subdirectory. If unsure, ask the Feature Lead or refer to existing structure."

documentation_and_comments:
  language:
    rule: "All comments, documentation (TSDoc for components/props/events, services), logs, and commit messages MUST be written in English."
  component_documentation:
    rule: "All reusable UI components MUST have clear TSDoc comments above prop type definitions, emits declarations (Vue), or within the component's main comment block. Document: purpose, all props (name, type, required, default, description), emitted events (name, payload structure), and slots."
  hook_service_documentation:
    rule: "Reusable hooks (React), composables (Vue), and service functions MUST be documented with TSDoc: purpose, parameters (with types), return values (with types), and important side effects."
  inline_comments: "Use sparingly for complex or non-obvious logic. Explain the 'why'."
  todo_fixme_notes: "Use `// TODO:` or `// FIXME:`. Include a brief description and optionally a task ID."

technology_stack_and_practices_frontend: # Assuming Vue 3 with TypeScript as an example
  framework_specifics:
    vue_js_ts: "Utilize Vue 3 Composition API with `<script setup lang=\"ts\">` for new components. Follow SFC best practices. Understand reactivity, component lifecycle, props/emits, slots. Use Pinia for state management if adopted project-wide."
  state_management:
    rule: "Use the project's designated state management library (e.g., Pinia, Vuex, Redux Toolkit, Zustand) for global or complex shared state. Avoid excessive prop drilling."
  component_design:
    rule: "Design reusable, decoupled components. Break down complex UI. Clearly define component APIs (typed props, emits)."
  routing:
    rule: "Use the project's standard routing library (e.g., Vue Router). Define routes clearly. Implement lazy loading for routes/modules."
  api_interaction:
    client: "Use the designated API client utility (e.g., Axios instance, TanStack Query wrapper). Handle base URLs, headers, and global error handling/interceptors centrally."
    best_practice: "Handle API request states (loading, success, error) gracefully in UI. Centralize API call logic in services/composables."
    data_contracts: "Strictly adhere to backend API contracts (`features/{feature_id}/design_notes.md`). Use TypeScript interfaces/types for request/response payloads."
  styling:
    rule: "Use project's established styling (e.g., Scoped CSS in Vue SFCs, Tailwind CSS, CSS Modules). Avoid unscoped global styles unless for theming."
  responsiveness_adaptiveness: "UI MUST be responsive (mobile, tablet, desktop) unless specified otherwise."
  internationalization_i18n: "All user-facing strings MUST use the project's i18n library and translation keys. No hardcoded strings."
  accessibility_a11y: "Develop with accessibility (WCAG 2.1 AA minimum) as a primary concern. Use semantic HTML, ensure keyboard navigability, provide ARIA attributes where needed, ensure sufficient color contrast."

testing_practices_frontend:
  unit_component_tests:
    rule: "Significant UI components (logic, props, events, slots) and utility functions/composables MUST have unit/component tests. Aim for good coverage of rendering, interactions, and edge cases."
    framework: "Use project's standard frontend testing framework (e.g., Vitest or Jest with Vue Test Utils / React Testing Library)."
  integration_tests_frontend: "Consider integration tests for views/pages orchestrating multiple components or complex user flows."
  test_organization_and_clarity: "Co-locate test files (e.g., `MyComponent.spec.ts`) or use `__tests__`. Test names MUST be descriptive. Follow AAA/GWT."
  running_tests: "All relevant unit/component tests MUST pass locally before committing or reporting task completion."

version_control_frontend:
  branching_and_operations:
    rule: "All frontend development work for a feature MUST be done on your **current Git branch**. Before starting work, ensure your branch is up-to-date by running `git pull`."
  commits:
    rule: "You MUST follow the **Standard Commit Protocol** defined in the project rule file at `.roo/rules/02-commit-protocol.txt`. This includes making small, atomic commits, using Conventional Commit messages (all lowercase), and including the relevant task ID (e.g., `{feature_id}/{task_id}`)."
  pushing_changes:
    rule: "Push changes to your current branch's remote counterpart (e.g., using `git push origin HEAD`) regularly, and always before reporting task completion or requesting a code review."

security_best_practices_frontend:
  client_side_validation: "Implement for UX, but NEVER rely on it solely. Server-side validation is authoritative."
  data_exposure_and_handling: "Avoid exposing sensitive info in JS bundle, local storage (unless essential & secured), or logs. Sanitize user-generated content before rendering (frameworks often help)."
  api_security: "Use HTTPS. Handle auth tokens securely (e.g., HttpOnly cookies or secure local storage if necessary; send via Authorization header). Be aware of CSRF, CORS."
  dependency_vulnerability_management: "Use reputable npm packages. Check for vulnerabilities before adding/updating (see Dependency Management Protocols). Keep dependencies updated via `pnpm up` or similar, coordinated with Feature Lead."

performance_considerations_frontend:
  efficient_rendering_and_updates: "Minimize unnecessary re-renders (e.g., `React.memo`, Vue's reactivity optimizations)."
  bundle_size_and_code_splitting: "Strive for small bundles. Use route/component-based code splitting. Lazy load."
  asset_optimization: "Optimize images, fonts. Minify JS/CSS (build tool's job)."
  data_fetching_and_state: "Fetch only necessary data. Use efficient state management. Consider client-side caching for API responses."
  profiling_and_optimization: "Use browser dev tools (Performance, Lighthouse) to profile and address actual bottlenecks."

# --- Frontend Dependency Management Protocols (npm) ---
# These protocols MUST be followed when dealing with external npm packages.
dependency_management_protocols_frontend:
  protocol_introduction:
    message: "IMPORTANT: When your task involves using, adding, or updating npm packages for the frontend, you MUST follow the protocols below. This ensures up-to-date information, helps avoid vulnerabilities, and maintains project compatibility."

  documentation_lookup_frontend:
    trigger_conditions:
      - "Before using an npm package for the first time for a feature."
      - "When encountering errors (type errors, runtime issues, build problems), uncertainty, or needing to understand best practices for a specific npm package."
      - "When asked by the Feature Lead to research an npm package's specific usage pattern."
    priority: 700
    required_action: |
      <thinking>
      **[Protocol Triggered: Frontend (npm) Library Documentation Lookup]**
      I need up-to-date information about the npm package: '<Identify Package Name>'.
      My internal knowledge might be outdated. I MUST consult its official documentation.

      Action Plan:
      1.  **Identify Package Name:** Confirm the exact npm package name.
      2.  **Select MCP Tool for Documentation:**
          *   Prefer `package-docs` server:
              *   Use `describe_npm_package` tool to get a summary and confirm relevance. Arguments: `{"package": "<package_name>"}`.
              *   For detailed search within docs, use `search_package_docs`. Arguments: `{"package": "<package_name>", "query": "<search_term>", "language": "npm"}`.
              *   To get full README/documentation sections, use `get_npm_package_doc`. Arguments: `{"package": "<package_name>", "section": "[optional_section_name]", "query": "[optional_query]"}`.
          *   Alternatively, use `context7` server: First, `resolve-library-id` (e.g., `{"libraryName": "<package_name>"}`), then `get-library-docs` with the obtained ID.
          *   If MCP tools fail or are unsuitable, perform a targeted web search for "official [package_name] documentation" or "[package_name] npm".
      3.  **Analyze & Apply:** Carefully review the fetched documentation. Use this information to implement the code correctly, following documented patterns, API usage, and best practices for the frontend framework in use (e.g., Vue, React, Angular).
      If, after consulting documentation, I still face unresolvable issues, I will report this as a blocker to the Feature Lead, detailing the package, the issue, and the documentation I consulted.
      </thinking>
      <!-- Example: Looking up 'axios' using package-docs -->
      <!--
      <use_mcp_tool>
        <server_name>package-docs</server_name>
        <tool_name>describe_npm_package</tool_name>
        <arguments>{"package": "axios"}</arguments>
      </use_mcp_tool>
      -->

  dependency_addition_or_update_frontend:
    trigger_conditions:
      - "When the task requires adding a NEW npm package to `frontend/package.json`."
      - "When the task requires UPDATING an existing npm package to a new version in `frontend/package.json`."
    priority: 600
    required_action: |
      <thinking>
      **[Protocol Triggered: Frontend (npm) Dependency Addition/Update]**
      The current task requires adding or updating npm package(s) in `frontend/package.json`.
      Let the package be '<Identify Package Name>'.

      Action Plan:
      1.  **Consult Documentation (if new package):** If this is a new package for me or the project, first trigger `documentation_lookup_frontend` protocol.
      2.  **Determine Target Version:**
          *   If a specific version is requested, use that.
          *   Otherwise, I MUST find the latest stable version compatible with the project's frontend framework and other key dependencies. Use `package-version` MCP server's `check_npm_versions` tool.
          *   Example: `<use_mcp_tool><server_name>package-version</server_name><tool_name>check_npm_versions</tool_name><arguments>{"dependencies": {"<package_name>": "latest"}}</arguments></use_mcp_tool>`. The result will provide the latest stable version string (e.g., "^1.2.3").
      3.  **Check for Known Vulnerabilities (Conceptual):** (Note: A dedicated tool for vulnerability scanning is ideal. If not available, rely on up-to-date library versions from reputable sources).
      4.  **Update `frontend/package.json`:**
          a.  `<read_file><path>frontend/package.json</path></read_file>`.
          b.  Modify the `dependencies` or `devDependencies` object in the parsed JSON content to add the new package with the determined version (e.g., `"<package_name>": "^1.2.3"`) or update the existing package's version string.
          c.  Convert the modified JSON object back to a string.
          d.  `<write_to_file><path>frontend/package.json</path><content>[new_json_string]</content><line_count>[lc]</line_count></write_to_file>`. If this write fails, report as a blocker.
      5.  **Trigger Automatic Dependency Installation:** After a successful `write_to_file` for `frontend/package.json`, the `auto_install_dependencies_frontend` protocol MUST be immediately triggered.
      6.  **Document Rationale (if significant):** If a non-latest version or a less common package is chosen, note why in the commit message or request Feature Lead to log in `features/{feature_id}/decisions.md`.
      </thinking>
      <!-- Example: Adding "axios": "^1.2.0" to frontend/package.json -->
      <!--
      <read_file><path>frontend/package.json</path></read_file>
      <thinking>Current package.json content read. Will add/update "axios": "^1.2.0" to dependencies.</thinking>
      <write_to_file>
        <path>frontend/package.json</path>
        <content>{... complete updated JSON content ...}</content>
        <line_count>...</line_count>
      </write_to_file>
      -->
      <!-- This write_to_file success would then trigger auto_install_dependencies_frontend -->

  auto_install_dependencies_frontend:
    trigger_conditions:
      - "Immediately after this `Code-Frontend` mode successfully modifies `frontend/package.json`."
    priority: 100
    required_action: |
      <thinking>
      **[Protocol Triggered: Auto-Install Frontend Dependencies]**
      I have just successfully modified `frontend/package.json`.
      **I MUST now execute the package manager's install command in the `frontend/` directory.**
      This ensures my local `node_modules` and lockfile (e.g., `pnpm-lock.yaml`, `package-lock.json`, `yarn.lock`) are updated.

      Action Plan:
      1.  **Determine Package Manager & Command:** Assume `pnpm` is the project standard. Command: `pnpm install`. (If `npm` or `yarn` are standard, use `npm install` or `yarn install` respectively).
      2.  **Working Directory:** `frontend/`.
      3.  Use `execute_command`.
      4.  If the installation command fails (e.g., peer dependency conflicts, network issues), I MUST report this as a blocker to the Feature Lead.
      </thinking>
      <execute_command>
      <command>pnpm install</command>
      <cwd>frontend</cwd> <!-- Crucial: run in the frontend directory -->
      </execute_command>
      <!-- Wait for command output. If error, report blocker. -->
      <thinking>Frontend dependency installation command executed in `frontend/` directory. I will note its success/failure in my final task report to Feature Lead.</thinking>