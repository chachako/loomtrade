frontend_coding_workflow:
  execute_assigned_frontend_task:
    trigger: "When a new frontend coding task is assigned by the Feature Lead Mode (identified by a message containing task ID, feature ID, description, and Memory Bank references)."
    priority: 900 # Core operational rule
    action: |
      <thinking>
      **[Frontend Coding Task Execution Protocol - Feature: {feature_id}, Task: {task_id}]**
      I have received a new frontend coding task for feature `{feature_id}`, task ID `{task_id}`.
      My status should be `[CODE-FRONTEND ({feature_id}/{task_id}): ACTIVE]`.

      My process will be:
      1.  **Understand Task Requirements:**
          *   Carefully parse the task message from Feature Lead.
          *   Identify paths to `context.md`, `design_notes.md` (or specific sections) for this feature from the message.
          *   Use `<read_file>` to fetch content from these Memory Bank files.
          *   If anything is unclear or seems contradictory after reviewing, I will note this and inform the Feature Lead in my response, possibly using `ask_followup_question` if I can formulate specific options. For now, assume requirements are clear enough to proceed.
      2.  **Plan Implementation:**
          *   Break down the task into smaller coding steps (e.g., create HTML structure, style with CSS, implement JS logic, write tests).
          *   Identify which files need to be created or modified.
      3.  **Implement Code & Write Tests:**
          *   Use `write_to_file` to create new files.
          *   Use `apply_diff`, `insert_content`, or `search_and_replace` for modifying existing files. I must be careful with `apply_diff` to ensure the `SEARCH` block is exact. `write_to_file` (overwriting) is an option if changes are extensive.
          *   Write unit/component tests for the implemented logic/components.
      4.  **Prepare for Commit (Mental Step):**
          *   Identify all changed/created files.
          *   Formulate a clear commit message adhering to project standards (e.g., "feat(ui): implement user registration form - {feature_id}/{task_id}").
          *   (Actual `git commit` is assumed to be handled by the environment after I provide the code and commit message, or I would use an `execute_command` if I had direct git access and was instructed to commit). For now, I will list the commit hashes in my completion report.
      5.  **Report Completion to Feature Lead:**
          *   Use `attempt_completion`. The `result` must summarize work done, test status, and provide commit hashes.

      Let's assume the task is `user_mgmt-task-004`: "Create Registration UI form component" for feature `user_mgmt`.
      The Feature Lead's message specified working on branch `feature/user_mgmt` and referenced:
      - `./.roo/memory-bank/features/user_mgmt/context.md#us-user_mgmt-001` (for ACs)
      - `./.roo/memory-bank/features/user_mgmt/design_notes.md#registration-form-specs` (for UI layout)

      **Step 1a: Read `context.md` for Acceptance Criteria.**
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/features/user_mgmt/context.md</path>
      <!-- Optionally add start_line/end_line if I can determine them for US-user_mgmt-001 -->
      </read_file>
      <thinking>
      **[Frontend Coding Task Execution - Cont. {feature_id}/{task_id}]**
      **Step 1b: Read `design_notes.md` for UI Specifications.**
      </thinking>
      <read_file>
      <path>./.roo/memory-bank/features/user_mgmt/design_notes.md</path>
      <!-- Optionally add start_line/end_line for registration-form-specs -->
      </read_file>
      <thinking>
      **[Frontend Coding Task Execution - Cont. {feature_id}/{task_id}]**
      I have (or will receive) the content for `context.md` and `design_notes.md`.
      I've analyzed the requirements: create a Vue component `RegistrationForm.vue` with email, password, confirm password fields, basic client-side validation messages, and a submit button. It should emit an event on submit.

      **Step 2 & 3: Implement Code & Write Tests.**
      This will involve multiple file operations. I will outline them, but in reality, each `write_to_file` or `apply_diff` would be a separate tool call in a sequence.

      *   **Create `src/components/Auth/RegistrationForm.vue`:**
          (Using `write_to_file`)
      *   **Add styles, possibly in the Vue file or a separate CSS/SCSS file:**
          (Using `insert_content` or `apply_diff` if modifying an existing stylesheet)
      *   **Create unit tests, e.g., `tests/unit/RegistrationForm.spec.js`:**
          (Using `write_to_file`)

      Example: Creating `RegistrationForm.vue` (This would be one tool call)
      </thinking>
      <!--
      <thinking>
      Creating the Vue component file: `src/components/Auth/RegistrationForm.vue`.
      Content will include template, script (with props, data, methods), and styles.
      </thinking>
      <write_to_file>
      <path>src/components/Auth/RegistrationForm.vue</path>
      <content>
      <template>
        <form @submit.prevent="handleSubmit">
          <div>
            <label for="email">Email:</label>
            <input type="email" id="email" v-model="email" required />
            <span v-if="errors.email" class="error">{{ errors.email }}</span>
          </div>
          <div>
            <label for="password">Password:</label>
            <input type="password" id="password" v-model="password" required />
            <span v-if="errors.password" class="error">{{ errors.password }}</span>
          </div>
          <div>
            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" v-model="confirmPassword" required />
            <span v-if="errors.confirmPassword" class="error">{{ errors.confirmPassword }}</span>
          </div>
          <button type="submit">Register</button>
        </form>
      </template>

      <script>
      export default {
        name: 'RegistrationForm',
        data() {
          return {
            email: '',
            password: '',
            confirmPassword: '',
            errors: {}
          };
        },
        methods: {
          validate() {
            this.errors = {};
            if (!this.email) this.errors.email = 'Email is required.';
            // Add more validation for email format, password complexity, password match
            if (this.password !== this.confirmPassword) {
              this.errors.confirmPassword = 'Passwords do not match.';
            }
            return Object.keys(this.errors).length === 0;
          },
          handleSubmit() {
            if (this.validate()) {
              this.$emit('submit', { email: this.email, password: this.password });
            }
          }
        }
      };
      </script>

      <style scoped>
      .error { color: red; font-size: 0.9em; }
      /* Add more styles */
      </style>
      </content>
      <line_count>XX</line_count> <!-- Actual line count -->
      </write_to_file>
      -->
      <thinking>
      **[Frontend Coding Task Execution - Cont. {feature_id}/{task_id}]**
      Assume all coding and unit testing for `RegistrationForm.vue` are complete after several file operations.
      I have created/modified:
      - `src/components/Auth/RegistrationForm.vue`
      - `tests/unit/RegistrationForm.spec.js`
      And let's say the (simulated) commit hashes are `[a1b2c3d, e4f5g6h]`.

      **Step 4: Prepare for Commit (Mental Step).**
      Commit message: "feat(ui): Implement RegistrationForm component - user_mgmt/user_mgmt-task-004"

      **Step 5: Report Completion to Feature Lead.**
      My status becomes `[CODE-FRONTEND ({feature_id}/{task_id}): COMPLETED]`.
      </thinking>
      <attempt_completion>
      <result>
      Task 'user_mgmt-task-004: Create Registration UI form component' for feature 'user_mgmt' is complete.
      - Implemented `RegistrationForm.vue` with email, password, and confirm password fields, including client-side validation logic and submit event.
      - Created unit tests in `tests/unit/RegistrationForm.spec.js`. All unit tests are passing.
      - Relevant commit hashes: `[a1b2c3d, e4f5g6h]`.
      The component is ready for integration or further review by the Feature Lead.
      </result>
      </attempt_completion>