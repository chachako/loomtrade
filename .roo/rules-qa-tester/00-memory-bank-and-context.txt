qa_tester_memory_bank_and_context:
  understand_qa_assignment:
    trigger: "When QA-Mode is activated with a new testing task by a Feature Lead (via new_task, message should contain feature_id, feature_name, branch_to_test which will be 'main', links to context.md, design_notes.md, and bug reporting instructions)."
    priority: 900
    action: |
      <thinking>
      **[Understand QA Assignment - QA Tester]**
      I have been assigned a new QA testing task.
      The assignment message from the Feature Lead for feature '{context.feature_name}' (ID: {context.feature_id}) should provide:
      - `task_id`: A unique ID for this QA task itself.
      - `feature_id`: The ID of the feature to be tested.
      - `feature_name`: The human-readable name of the feature.
      - `branch_to_test`: This will be "main" as all development and integration happens on main.
      - `summary_of_functionality_for_qa`: A brief from Feature Lead about what was implemented and is ready for testing on `main`.
      - Links to Memory Bank for context:
          - `context_md_path`: Path to `features/{feature_id}/context.md`.
          - `design_notes_md_path`: Path to `features/{feature_id}/design_notes.md`.
          - `active_log_md_path`: Path to `features/{feature_id}/active_log.md`.
      - `bug_reporting_instructions`: Specific format and location for logging bugs.

      My first step is to parse this assignment and load all necessary context from the Memory Bank.
      My status will be `[QA-TESTER ({context.feature_id} - QA Task {context.task_id}): LOADING_CONTEXT]`.
      I must have all information before starting the test execution defined in `01-test-execution-and-reporting.txt`.
      </thinking>

      <!-- Wait -->

      <thinking>
      I have parsed the assignment details for QA task '{context.task_id}' on feature '{context.feature_name}' (ID: {context.feature_id}). Testing will be on the `main` branch.
      Now I will read all referenced Memory Bank files.
      </thinking>

      1.  **Read Feature Context (Requirements, Acceptance Criteria):**
          <read_file><path>{context.context_md_path}</path></read_file>
          <!-- Wait -->
      2.  **Read Design Notes (UI/API Specifications):**
          <thinking>Checking if design_notes_md_path is provided and not empty.</thinking>
          <!-- If context.design_notes_md_path is valid: -->
          <read_file><path>{context.design_notes_md_path}</path></read_file>
          <!-- Wait -->
      3.  **Read Active Log (for recent context or known issues):**
          <thinking>Checking if active_log_md_path is provided and not empty.</thinking>
          <!-- If context.active_log_md_path is valid: -->
          <read_file><path>{context.active_log_md_path}</path></read_file>
          <!-- Wait -->
      4.  **Review Global Standards (if relevant to testing approach):**
          <read_file><path>./.roo/memory-bank/global/shared_system_patterns.md</path></read_file>
          <!-- Wait -->

      <thinking>
      All specified context files have been requested.
      Once I receive their content, I will understand what to test on the `main` branch for feature '{context.feature_name}'.
      Bug reporting instructions are: `{context.bug_reporting_instructions}`.
      Test execution will be guided by `.roo/rules-qa-tester/01-test-execution-and-reporting.txt`.
      If crucial information is missing, I must report this back to the Feature Lead.
      Assuming all context is loaded successfully...
      </thinking>
      <attempt_completion>
        <result>
        Context for QA testing task '{context.task_id}' on feature '{context.feature_name}' (ID: {context.feature_id}) has been successfully loaded.
        Testing will be performed on the `main` branch.
        Summary of functionality from Feature Lead: `{context.summary_of_functionality_for_qa}`.
        Bug reporting instructions are noted.
        I am ready to begin test planning and execution.
        </result>
      </attempt_completion>
      My status becomes `[QA-TESTER ({context.feature_id} - QA Task {context.task_id}): READY_TO_TEST]`.

  status_prefix_qa_tester:
    rule: "Begin EVERY response with `[QA-TESTER ({context.feature_id} - QA Task {context.task_id}): <STATUS>]`. <STATUS> can be LOADING_CONTEXT, READY_TO_TEST, PLANNING_TESTS, EXECUTING_TESTS, REPORTING_RESULTS, CONTEXT_INCOMPLETE_BLOCKED, etc."